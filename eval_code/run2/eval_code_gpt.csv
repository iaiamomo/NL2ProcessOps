process,input,model,tasks,tasks_original,tools,code
p01,"When a pallet arrives at the working station, the system empties the scan results. Then the worker scans the order. Afterwards the system displays the scanning UI to the worker and in parallel, the worker assembles the part.","graph LR
1:startevent:((startevent)) --> 2:task:(Empty Scan Results)
2:task: --> 3:task:(Scan Order)
3:task: --> 4:task:(Display Scanning UI)
4:task: --> 5:parallelgateway:{AND}
5:parallelgateway:{AND} --> 6:task:(Worker Assembles Part)
5:parallelgateway:{AND} --> 7:task:(Another Task)
6:task: --> 8:endevent:((endevent))
7:task: --> 8:endevent:((endevent))","[""empty the scan results"", ""worker scans the order"", ""display scanning UI to the worker"", ""worker assembles the part"", ""perform another task""]","[""empty the scan results"", ""scan the order"", ""display the scanning UI to the worker"", ""worker assembles the part"", ""perform another task""]","{""name"": ""EmptyScan"", ""description"": ""The working station system empty the scan result.It takes no input. It returns no output."", ""input_parameters"": [], ""output_parameters"": [], ""actor"": ""working_station_is""}
{""name"": ""ScanOrder"", ""description"": ""Worker scans the order.It takes no input. It returns the order id scanned."", ""input_parameters"": [], ""output_parameters"": [""order_id:int""], ""actor"": ""working_station_is""}
{""name"": ""DisplaysScanningUI"", ""description"": ""The working station system displays the scanning UI.It takes no input. It returns no output."", ""input_parameters"": [""order_id:int""], ""output_parameters"": [], ""actor"": ""working_station_is""}
{""name"": ""AssembleParts"", ""description"": ""Worker assembles parts.It takes no input. It returns no output."", ""input_parameters"": [], ""output_parameters"": [], ""actor"": ""worker""}
{""name"": ""AssembleParts"", ""description"": ""The welding machine assemble the parts into brackets.This tool takes no input and does not return anything."", ""input_parameters"": [], ""output_parameters"": [], ""actor"": ""welding_machine""}
{""name"": ""AssembleBicycle"", ""description"": ""Assemble the bicycle.It takes the part list. It does not return anything."", ""input_parameters"": [""part_list:list""], ""output_parameters"": [], ""actor"": ""manufacturer""}
{""name"": ""MoveRobot"", ""description"": ""Move the robot.It takes as input the coordinates of the destination. It return a boolean value, True if the robot has reached the destination, False otherwise."", ""input_parameters"": [""x:int"", ""y:int""], ""output_parameters"": [""destination_reached:bool""], ""actor"": ""robot""}
","import threading

# Assuming the tools are already imported and available for use

def empty_scan_results():
    EmptyScan.call()

def scan_order():
    return ScanOrder.call()

def display_scanning_ui(order_id):
    DisplaysScanningUI.call(order_id=order_id)

def worker_assembles_part():
    AssembleParts.call()

def another_task():
    # Assuming another task is similar to assembling parts but done by a different actor
    # For demonstration, let's assume it's the welding machine assembling parts
    AssembleParts.call()

def process():
    # Empty the scan results
    empty_scan_results()
    
    # Scan the order and get order_id
    order_id = scan_order()
    
    # Display the scanning UI
    display_scanning_ui(order_id)
    
    # Start parallel tasks
    worker_thread = threading.Thread(target=worker_assembles_part)
    another_task_thread = threading.Thread(target=another_task)
    
    worker_thread.start()
    another_task_thread.start()
    
    # Wait for both threads to complete
    worker_thread.join()
    another_task_thread.join()

if __name__ == ""__main__"":
    process()"
p02,"The calibration process of a cardboard production consists of continuously capturing a photo of the cardboard being produced. Each photo is analyzed to check if all the markers identified are ok. If markers are not ok, the calibration process continues. If the markers are ok, the speed of the die cutting machine is set to 10000 RPM and the process ends.","graph LR
1:startevent:((startevent)) --> 2:task:(Capture photo of cardboard)
2:task: --> 3:task:(Analyze photo)
3:task: --> 4:exclusivegateway:{x}
4:exclusivegateway:{x} --> |Markers not ok| 2:task:
4:exclusivegateway:{x} --> |Markers ok| 5:task:(Set speed of die cutting machine to 10000 RPM)
5:task: --> 6:endevent:((endevent))","[""capture a photo of the cardboard being produced"", ""analyze the photo to check if all the markers are ok"", ""continue the calibration process if markers are not ok"", ""set the speed of the die cutting machine to 10000 RPM and end the process if markers are ok""]","[""continuously capture a photo of the cardboard being produced"", ""analyze each photo to check if all the markers are ok"", ""if markers are not ok, continue the calibration process"", ""if markers are ok, set the speed of the die cutting machine to 10000 RPM and end the process""]","{""name"": ""CaptureImage"", ""description"": ""Capture of a photo of the cardboard from the camera.This tool takes no input and returns an image captured from the the camera. The image is returned as a numpy matrix."", ""input_parameters"": [], ""output_parameters"": [""image:np.matrix""], ""actor"": ""camera""}
{""name"": ""StoreCardboardRoll"", ""description"": ""Worker stores the cardboard roll in the warehouse.It takes as input the location. It returns no output."", ""input_parameters"": [""location:str""], ""output_parameters"": [], ""actor"": ""worker""}
{""name"": ""CheckTypeCardboard"", ""description"": ""Worker checks the type of cardboard.It takes no input. It returns no output."", ""input_parameters"": [], ""output_parameters"": [""type_cardboard:str""], ""actor"": ""worker""}
{""name"": ""CheckMarkers"", ""description"": ""Analysis of the markers on a cardboard image.This tool takes as input an image depicting a cardboard. It returns a boolean indicating if markers are present on the cardboard."", ""input_parameters"": [""image:np.matrix""], ""output_parameters"": [""markers_ok:bool""], ""actor"": ""vision_is""}
{""name"": ""SetSpeedDieMachine"", ""description"": ""set the speed of the die cutting machine.It takes as input the speed. It returns a boolean value, True if the speed has been set, False otherwise."", ""input_parameters"": [""speed:int""], ""output_parameters"": [""speed_set:bool""], ""actor"": ""die_machine""}
","import numpy as np

def calibration_process():
    while True:
        # Capture photo of cardboard
        captured_image = CaptureImage.call()
        
        # Analyze photo
        markers_ok = CheckMarkers.call(image=captured_image)
        
        # Exclusive gateway to check if markers are ok
        if markers_ok:
            # Set speed of die cutting machine to 10000 RPM
            speed_set = SetSpeedDieMachine.call(speed=10000)
            if speed_set:
                print(""Die cutting machine speed set to 10000 RPM successfully."")
            else:
                print(""Failed to set die cutting machine speed."")
            break
        else:
            print(""Markers not ok, capturing another photo."")

if __name__ == ""__main__"":
    calibration_process()"
p03,"The manufacturing process of spindles in HSD company is fully automated. When a new order for a spindle arrives at the sales department, a new process instance is initiated. The warehouse system retrive the necessary raw materials, and in parallel the L12 line is set up for the assembly of the ordered spindle. Once the warehouse successfully retrieves the raw materials and the L12 line is set up, the spindle is assembled over the L12 line. Subsequently, the spindle undergoes testing and running-in in the smart tester. If the outcome of the test is negative, the spindle is sent to maintenance. Then, the the process ends.","graph LR
1:startevent:((startevent)) --> 2:task:(Receive new order for spindle)
2:task: --> 3:task:(Retrieve raw materials from warehouse)
2:task: --> 4:task:(Set up L12 line)
3:task: --> 5:parallelgateway:{AND}
4:task: --> 5:parallelgateway:{AND}
5:parallelgateway:{AND} --> 6:task:(Assemble spindle)
6:task: --> 7:task:(Test and run-in spindle)
7:task: --> 8:exclusivegateway:{x}
8:exclusivegateway:{x} --> |Test outcome is negative| 9:task:(Send spindle to maintenance)
8:exclusivegateway:{x} --> |Test outcome is positive| 10:endevent:((endevent))
9:task: --> 10:endevent:((endevent))","[""receive a new order for a spindle"", ""retrieve the necessary raw materials from the warehouse"", ""set up the L12 line for spindle assembly"", ""assemble the spindle over the L12 line"", ""test and run-in the spindle in the smart tester"", ""send the spindle to maintenance if the test outcome is negative""]","[""receive a new order for a spindle"", ""retrieve the necessary raw materials from the warehouse"", ""set up the L12 line for spindle assembly"", ""assemble the spindle"", ""test and run-in the spindle"", ""if the test outcome is negative, send the spindle to maintenance""]","{""name"": ""L12AssembleSpindle"", ""description"": ""Assembly of a spindle over the L12 line.This tool takes as input the part list of a spindle. It returns a boolean indicating if the spindle has been assembled."", ""input_parameters"": {""part_list"": {""type"": ""list"", ""description"": ""list of parts of a spindle""}}, ""output_parameters"": {""assembled"": {""type"": ""bool"", ""description"": ""True if the spindle has been assembled, False otherwise""}}, ""actor"": ""l12""}
{""name"": ""RetrieveRawMaterials"", ""description"": ""Warehouse deparment evaluates part list and retrieve raw materials.This tool takes as input the part list of a product. It returns a boolean indicating if all the parts are retrieved."", ""input_parameters"": [""part_list:list""], ""output_parameters"": [""retrieved:bool""], ""actor"": ""wms_is""}
{""name"": ""OrderRawMaterial"", ""description"": ""Warehouse deparment orders the raw material.It takes the part as input. It does not return anything."", ""input_parameters"": [""part:str""], ""output_parameters"": [], ""actor"": ""wms_is""}
{""name"": ""RetrieveRawMaterial"", ""description"": ""Warehouse department retrieves a raw material.It takes the part as input. It returns a boolean indicating if the part is retrieved."", ""input_parameters"": [""part:str""], ""output_parameters"": [""retrieved:bool""], ""actor"": ""wms_is""}
{""name"": ""L12SetUp"", ""description"": ""Set up the L12 line for spindle assembly.This tool takes no input and returns a boolean indicating if the line has been set up."", ""input_parameters"": [], ""output_parameters"": [""set_up:bool""], ""actor"": ""l12""}
{""name"": ""TestSpindle"", ""description"": ""Test and run-in of the spindle.It takes as input the identificator of the product to be tested. It returns a boolean value, True if the spindle passed the test, False otherwise."", ""input_parameters"": [""product_id:int""], ""output_parameters"": [""passed:bool""], ""actor"": ""smart_tester""}
","import threading

# Assuming the tools are already imported and available for use
# from tools import L12AssembleSpindle, RetrieveRawMaterials, L12SetUp, TestSpindle

def retrieve_materials_and_setup_line(part_list):
    # Retrieve raw materials
    materials_retrieved = RetrieveRawMaterials.call(part_list=part_list)
    # Set up L12 line
    line_set_up = L12SetUp.call()
    return materials_retrieved, line_set_up

def process(part_list, product_id):
    # Start the process by retrieving materials and setting up the line in parallel
    thread = threading.Thread(target=retrieve_materials_and_setup_line, args=(part_list,))
    thread.start()
    thread.join()
    materials_retrieved, line_set_up = thread.result()

    # Check if both tasks were successful
    if materials_retrieved and line_set_up:
        # Assemble the spindle
        assembly_success = L12AssembleSpindle.call(part_list=part_list)
        if assembly_success:
            # Test and run-in the spindle
            test_passed = TestSpindle.call(product_id=product_id)
            if test_passed:
                return ""Process completed successfully.""
            else:
                # If test failed, send spindle to maintenance (not explicitly modeled, so we just print a message)
                return ""Spindle sent to maintenance.""
        else:
            return ""Assembly failed.""
    else:
        return ""Failed to retrieve materials or set up the line.""

if __name__ == ""__main__"":
    part_list = [""part1"", ""part2"", ""part3""]  # Example part list
    product_id = 123  # Example product ID
    result = process(part_list, product_id)
    print(result)"
p04,"When craving a custom 3D model, as a first step you have to instruct an artist to create a project for you. First you have to send him several sketches, and then tell him what to change until you are satisfied with the result. After that, you choose a plastic color you want to use for 3D printing. If you have the color at home (in stock), you check how much color you have left. If it's under 100 grams, you put it on your shopping list. If you do not have the color at home, you order it. When you have the plastic, you can turn the printer on and heat up the bed and the extruder (it continuously sends you back its status). While doing that, you can generate the gcode file for your printer out of the STL sent to you by the artist. After that you print the model.","graph LR
1:startevent:((startevent)) --> 2:task:(Instruct artist to create project)
2:task: --> 3:task:(Send sketches to artist)
3:task: --> 4:task:(Provide feedback to artist)
4:task: --> 5:exclusivegateway:{x}
5:exclusivegateway:{x} --> |Satisfied with result| 6:task:(Choose plastic color)
5:exclusivegateway:{x} --> |Not satisfied with result| 2:task:
6:task: --> 7:exclusivegateway:{x}
7:exclusivegateway:{x} --> |Color in stock and under 100 grams| 8:task:(Put color on shopping list)
7:exclusivegateway:{x} --> |Color not in stock| 9:task:(Order color)
8:task: --> 10:task:(Heat up bed and extruder)
10:task: --> 11:task:(Generate gcode file)
11:task: --> 12:task:(Print model)
12:task: --> 13:endevent:((endevent))
9:task: --> 10:task:","[""instruct the artist to create the project"", ""send sketches to the artist"", ""provide feedback to the artist until satisfied with the result"", ""choose a plastic color for 3D printing"", ""check if the color is in stock and under 100 grams"", ""put the color on the shopping list if necessary"", ""order the color if not in stock"", ""heat up the bed and extruder of the printer"", ""generate the gcode file for the printer"", ""print the 3D model""]","[""instruct the artist to create the project"", ""send sketches to the artist"", ""provide feedback to the artist until satisfied with the result"", ""choose a plastic color for 3D printing"", ""if the color is in stock and under 100 grams, put it on the shopping list"", ""if the color is not in stock, order it"", ""heat up the bed and extruder of the printer"", ""generate the gcode file for the printer"", ""print the 3D model""]","{""name"": ""SendSketches"", ""description"": ""Send the sketches of the project to the artist.It takes no input. It returns the description of the project."", ""input_parameters"": [], ""output_parameters"": [""project:str""], ""actor"": ""manufacturer""}
{""name"": ""ChoosePlasticColor"", ""description"": ""Choose the color of the plastic.It takes no input. It returns the color of the plastic."", ""input_parameters"": [], ""output_parameters"": [""color:int""], ""actor"": ""manufacturer""}
{""name"": ""CheckColorQuantity"", ""description"": ""Check the quantity of the color.It takes the color as input. It returns the quantity of the color in grams."", ""input_parameters"": [""color:int""], ""output_parameters"": [""quantity:int""], ""actor"": ""manufacturer""}
{""name"": ""CheckColorAvailability"", ""description"": ""Check the availability of the color.It takes the color as input. It returns the availability of the color."", ""input_parameters"": [""color:int""], ""output_parameters"": [""availability:bool""], ""actor"": ""manufacturer""}
{""name"": ""OrderColor"", ""description"": ""Order the color.It takes the color as input. It does not return anything."", ""input_parameters"": [""color:int""], ""output_parameters"": [], ""actor"": ""manufacturer""}
{""name"": ""HeatUpBedExtruder"", ""description"": ""Heat up the bed and the extruder.It takes no input. It does not return anything."", ""input_parameters"": [], ""output_parameters"": [], ""actor"": ""printer_3d""}
{""name"": ""TurnOn"", ""description"": ""Turn on the 3D printer.It takes no input. It does not return anything."", ""input_parameters"": [], ""output_parameters"": [], ""actor"": ""printer_3d""}
{""name"": ""GenerateGCode"", ""description"": ""Generate the GCode file for the printer.It takes the object as input. It returns the GCode file."", ""input_parameters"": [""project:str""], ""output_parameters"": [""gcode:str""], ""actor"": ""manufacturer""}
{""name"": ""Print"", ""description"": ""Print the object.It takes the object as input. It does not return anything."", ""input_parameters"": [""GCodeFile:str""], ""output_parameters"": [], ""actor"": ""printer_3d""}
","def instruct_artist_and_create_project():
    satisfied = False
    while not satisfied:
        project_description = SendSketches.call()
        feedback = input(""Provide feedback to the artist (type 'satisfied' to proceed): "")
        if feedback.lower() == 'satisfied':
            satisfied = True
    return project_description

def choose_and_prepare_color():
    color = ChoosePlasticColor.call()
    availability = CheckColorAvailability.call(color=color)
    if availability:
        quantity = CheckColorQuantity.call(color=color)
        if quantity < 100:
            print(""Color quantity under 100 grams. Adding to shopping list."")
    else:
        OrderColor.call(color=color)
    return color

def prepare_printer_and_print(project_description):
    TurnOn.call()
    HeatUpBedExtruder.call()
    gcode = GenerateGCode.call(project=project_description)
    Print.call(GCodeFile=gcode)

def process():
    project_description = instruct_artist_and_create_project()
    color = choose_and_prepare_color()
    prepare_printer_and_print(project_description)

if __name__ == ""__main__"":
    process()"
p05,"Plastic injection molding is a manufacturing process for producing a variety of parts by injecting molten plastic material into a mold, and letting it cool and solidify into the desired end product. Our interest is in the quality assurance process which involves real-time monitoring of injection molding parameters. As each batch of molten plastic enters the mold, sensors capture data on temperature, pressure, and fill rates. The system analyzes this data to ensure that the molding parameters align with the specified standards. If any deviations are detected, the system triggers adjustments to the injection molding machine settings, allowing for immediate correction. Once the parameters are within the acceptable range, the system authorizes the production run to continue. This dynamic monitoring process guarantees the consistency and quality of the plastic molded components, minimizing the risk of defects and ensuring adherence to precise manufacturing specifications.","graph LR
1:startevent:((startevent)) --> 2:task:(Inject molten plastic into mold)
2:task: --> 3:task:(Capture data on temperature, pressure, and fill rates)
3:task: --> 4:task:(Analyze data)
4:task: --> 5:exclusivegateway:{x}
5:exclusivegateway:{x} --> |Deviations detected| 6:task:(Trigger adjustments to machine settings)
5:exclusivegateway:{x} --> |No deviations detected| 7:task:(Continue production run)
6:task: --> 3:task:
7:task: --> 8:endevent:((endevent))","[""batch of molten plastic enters the mold"", ""sensors capture temperature, pressure, and fill rates of machine"", ""analysis of measured data to ensure parameters align with standards"", ""adjustment of machine settings if deviations are detected"", ""continuation of production run if no deviations are detected""]","[""inject molten plastic into mold"", ""capture data on temperature, pressure, and fill rates"", ""analyze data to ensure parameters align with standards"", ""if deviations are detected, trigger adjustments to machine settings"", ""if no deviations are detected, continue production run""]","{""name"": ""AuthorizeProduction"", ""description"": ""Authorize the production of the mold.It takes no input and returns no output."", ""input_parameters"": [], ""output_parameters"": [], ""actor"": ""mold_is""}
{""name"": ""SensorMeasure"", ""description"": ""Measure the temperature, pressure and fill rates of the mold.It takes no input and returns the temperature of the oven."", ""input_parameters"": [], ""output_parameters"": [""temperature:int"", ""pressure:int"", ""fill_rate:int""], ""actor"": ""mold_is""}
{""name"": ""AnalyzeMold"", ""description"": ""Analyze the temperature, pressure and fill rates of the mold to check deviations.It takes the temperature, pressure and fill rate as input and returns a boolean indicating if the mold is ok."", ""input_parameters"": [""temperature:int"", ""pressure:int"", ""fill_rate:int""], ""output_parameters"": [""deviation:bool""], ""actor"": ""mold_is""}
{""name"": ""AdjustMold"", ""description"": ""Adjust the settings the mold.It takes no input and returns no output."", ""input_parameters"": [], ""output_parameters"": [], ""actor"": ""mold_is""}
","def inject_molten_plastic_into_mold():
    # This function represents the task of injecting molten plastic into the mold.
    # Since there's no specific tool provided for this task, we assume it's done automatically or manually.
    pass

def capture_and_analyze_data():
    # Capture data on temperature, pressure, and fill rates using the SensorMeasure tool.
    temperature, pressure, fill_rate = SensorMeasure.call()
    
    # Analyze the captured data to check for deviations using the AnalyzeMold tool.
    deviation = AnalyzeMold.call(temperature=temperature, pressure=pressure, fill_rate=fill_rate)
    
    return deviation

def trigger_adjustments_to_machine_settings():
    # Adjust the settings of the mold using the AdjustMold tool.
    AdjustMold.call()

def continue_production_run():
    # Authorize the production of the mold using the AuthorizeProduction tool.
    AuthorizeProduction.call()

def quality_assurance_process():
    # Start the process by injecting molten plastic into the mold.
    inject_molten_plastic_into_mold()
    
    while True:
        # Capture and analyze data to check for deviations.
        deviation_detected = capture_and_analyze_data()
        
        if deviation_detected:
            # If deviations are detected, trigger adjustments to machine settings.
            trigger_adjustments_to_machine_settings()
        else:
            # If no deviations are detected, continue the production run.
            continue_production_run()
            break

if __name__ == ""__main__"":
    quality_assurance_process()"
p06,"The production of custom metal brackets begins with order processing. The warehouse department evaluates the parts lists and in parallel the production planning department configures the robotic assembly line accordingly. The automated precision machine cuts the metal and the welding machine assembles the parts into brackets. A computer vision inspection system then checks for quality assurance. If defective brakets are detected, the process ends. After inspection, a coating system enhances durability. Finally, the process is complete.","graph LR
1:startevent:((startevent)) --> 2:task:(Order Processing)
2:task: --> 3:parallelgateway:{AND}
2:task: --> 4:task:(Configure Robotic Assembly Line)
3:parallelgateway:{AND} --> 5:task:(Evaluate Parts Lists)
3:parallelgateway:{AND} --> 4:task:
4:task: --> 6:task:(Cut Metal)
6:task: --> 7:task:(Assemble Parts)
7:task: --> 8:task:(Inspect Brackets)
8:task: --> 9:exclusivegateway:{x}
9:exclusivegateway:{x} --> |Defective Brackets| 10:endevent:((endevent))
9:exclusivegateway:{x} --> |No Defective Brackets| 11:task:(Coating System)
11:task: --> 12:endevent:((endevent))","[""order processing"", ""evaluation of parts lists"", ""configuration of robotic assembly line"", ""metal cutting"", ""parts assembly"", ""inspection of brackets for defects"", ""ending the process if defective brackets are detected"", ""application of coating for enhanced durability""]","[""process the order"", ""evaluate the parts lists"", ""configure the robotic assembly line"", ""cut the metal"", ""assemble the parts"", ""inspect the brackets for defects"", ""if defective brackets are detected, end the process"", ""if no defective brackets are detected, apply coating for enhanced durability""]","{""name"": ""ScanOrder"", ""description"": ""Worker scans the order.It takes no input. It returns the order id scanned."", ""input_parameters"": [], ""output_parameters"": [""order_id:int""], ""actor"": ""working_station_is""}
{""name"": ""RetrieveRawMaterials"", ""description"": ""Warehouse deparment evaluates part list and retrieve raw materials.This tool takes as input the part list of a product. It returns a boolean indicating if all the parts are retrieved."", ""input_parameters"": [""part_list:list""], ""output_parameters"": [""retrieved:bool""], ""actor"": ""wms_is""}
{""name"": ""ConfigureAssemblyLine"", ""description"": ""Configure the assembly line.This tool takes no input and does not return anything."", ""input_parameters"": [], ""output_parameters"": [], ""actor"": ""assembly_line""}
{""name"": ""CutMetal"", ""description"": ""The precision machine cut the metal.This tool takes no input and does not return anything."", ""input_parameters"": [], ""output_parameters"": [], ""actor"": ""precision_machine""}
{""name"": ""AssembleParts"", ""description"": ""Worker assembles parts.It takes no input. It returns no output."", ""input_parameters"": [], ""output_parameters"": [], ""actor"": ""worker""}
{""name"": ""AssembleParts"", ""description"": ""The welding machine assemble the parts into brackets.This tool takes no input and does not return anything."", ""input_parameters"": [], ""output_parameters"": [], ""actor"": ""welding_machine""}
{""name"": ""CheckQualityBrackets"", ""description"": ""Check the quality of the brackets.It takes no input. It returns a boolean indicating if the brackets are of good quality."", ""input_parameters"": [], ""output_parameters"": [""quality_ok:bool""], ""actor"": ""vision_is""}
{""name"": ""EnhanceProduct"", ""description"": ""The coating machine enhances the product.This tool takes no input and does not return anything."", ""input_parameters"": [], ""output_parameters"": [], ""actor"": ""coating_machine""}
","import threading

# Assuming the tools are already imported and available for use as described.
def process(part_list):
    # Scan the order and get the order_id
    order_id = ScanOrder.call()

    # Configure the assembly line and evaluate parts list in parallel
    def configure_assembly_line():
        ConfigureAssemblyLine.call()

    def evaluate_and_retrieve_parts():
        retrieved = RetrieveRawMaterials.call(part_list=part_list)
        return retrieved

    thread1 = threading.Thread(target=configure_assembly_line)
    thread2 = threading.Thread(target=evaluate_and_retrieve_parts)

    thread1.start()
    thread2.start()

    thread1.join()
    retrieved = thread2.join()

    if not retrieved:
        return False, ""Failed to retrieve all parts.""

    # Cut the metal
    CutMetal.call()

    # Assemble the parts
    AssembleParts.call()

    # Inspect the brackets
    quality_ok = CheckQualityBrackets.call()

    if not quality_ok:
        return False, ""Defective brackets detected.""

    # Enhance the product
    EnhanceProduct.call()

    return True, ""Process completed successfully.""

if __name__ == ""__main__"":
    part_list = [""part1"", ""part2"", ""part3""]
    success, message = process(part_list)
    print(f""Process status: {success}, Message: {message}"")"
p07,"You produce airplanes. While the base model is always the same, your customer likes to pimp their airplane with fancy interior. You let them decide between a number of 5 different bars, the number of seats, their color, and the amount of water in the toilets of their plane (you can come up with additional stuff). After you received the specifications you send the requirements to different teams to manufacture the parts. E.g. manufacturing the vodka bar is done by the Russian team, the whiskey bar is manufactured by an Irish team. After receiving the individual bits and pieces, the interior of the plane is assembled, and the plane is sent on a test flight. During the flight you create a test protocol which is sent to you and the customer. The plane is delivered to the customer, which has to confirm.","graph LR
1:startevent:((startevent)) --> 2:task:(Customer provides airplane specifications)
2:task: --> 3:task:(Order vodka bar)
2:task: --> 4:task:(Order whiskey bar)
2:task: --> 5:task:(Order seats)
2:task: --> 6:task:(Order toilet water amount)
3:task: --> 7:task:(Manufacture vodka bar)
4:task: --> 8:task:(Manufacture whiskey bar)
5:task: --> 9:task:(Manufacture seats)
6:task: --> 10:task:(Manufacture toilet water amount)
7:task: --> 11:parallelgateway:{AND}
8:task: --> 11:parallelgateway:{AND}
9:task: --> 11:parallelgateway:{AND}
10:task: --> 11:parallelgateway:{AND}
11:parallelgateway:{AND} --> 12:task:(Assemble interior)
12:task: --> 13:task:(Test flight)
13:task: --> 14:task:(Create test protocol)
14:task: --> 15:task:(Send test protocol to customer)
15:task: --> 16:task:(Send test protocol to manufacturer)
16:task: --> 17:task:(Deliver airplane to customer)
17:task: --> 18:task:(Customer confirms delivery)
18:task: --> 19:endevent:((endevent))","[""receive the specifications for the airplane from the customer"", ""order the vodka bar from the Russian team"", ""order the whiskey bar from the Irish team"", ""order the seats"", ""order the toilet water amount"", ""manufacture the vodka bar"", ""manufacture the whiskey bar"", ""manufacture the seats"", ""manufacture the toilet water amount"", ""assemble the interior of the plane"", ""send the plane on a test flight"", ""create a test protocol"", ""send the test protocol to the customer and manufacturer"", ""deliver the airplane to the customer"", ""customer confirms the delivery""]","[""receive the specifications for the airplane from the customer"", ""order the vodka bar"", ""order the whiskey bar"", ""order the seats"", ""order the toilet water amount"", ""manufacture the vodka bar"", ""manufacture the whiskey bar"", ""manufacture the seats"", ""manufacture the toilet water amount"", ""assemble the interior of the plane"", ""send the plane on a test flight"", ""create a test protocol"", ""send the test protocol to the customer"", ""send the test protocol to the manufacturer"", ""deliver the airplane to the customer"", ""customer confirms the delivery""]","{""name"": ""ReceiveOrder"", ""description"": ""Sales department receives a new order specification from customer.It takes no input. It returns the part list and the product id."", ""input_parameters"": [], ""output_parameters"": [""part_list:list"", ""product_id:int""], ""actor"": ""crm_is""}
{""name"": ""BuySnacks"", ""description"": ""Buy snacks for the party.It takes the list of people. It does not return anything."", ""input_parameters"": [""people:list""], ""output_parameters"": [], ""actor"": ""manufacturer""}
{""name"": ""ScanOrder"", ""description"": ""Worker scans the order.It takes no input. It returns the order id scanned."", ""input_parameters"": [], ""output_parameters"": [""order_id:int""], ""actor"": ""working_station_is""}
{""name"": ""OrderColor"", ""description"": ""Order the color.It takes the color as input. It does not return anything."", ""input_parameters"": [""color:int""], ""output_parameters"": [], ""actor"": ""manufacturer""}
{""name"": ""CheckColorQuantity"", ""description"": ""Check the quantity of the color.It takes the color as input. It returns the quantity of the color in grams."", ""input_parameters"": [""color:int""], ""output_parameters"": [""quantity:int""], ""actor"": ""manufacturer""}
{""name"": ""AssembleTreeHouse"", ""description"": ""Assemble the tree house.It takes the part list. It does not return anything."", ""input_parameters"": [""part_list:list""], ""output_parameters"": [], ""actor"": ""manufacturer""}
{""name"": ""AssembleInterior"", ""description"": ""Assemble the interior of the plane.It takes the part list and the plane id. It does not return anything."", ""input_parameters"": [""part_list:list"", ""product_id:int""], ""output_parameters"": [], ""actor"": ""manufacturer""}
{""name"": ""TestSpindle"", ""description"": ""Test and run-in of the spindle.It takes as input the identificator of the product to be tested. It returns a boolean value, True if the spindle passed the test, False otherwise."", ""input_parameters"": [""product_id:int""], ""output_parameters"": [""passed:bool""], ""actor"": ""smart_tester""}
{""name"": ""CreateTestProtocol"", ""description"": ""Create the test protocol for the product.It takes the part list and the product id. It returns the test protocol."", ""input_parameters"": [""part_list:list"", ""product_id:int""], ""output_parameters"": [""test_protocol:str""], ""actor"": ""manufacturer""}
{""name"": ""DeliverTestProtocol"", ""description"": ""Deliver the test protocol to the customer.It takes the protocol and the product id as input. It does not return anything."", ""input_parameters"": [""product_id:int"", ""protocol:str""], ""output_parameters"": [], ""actor"": ""crm_is""}
{""name"": ""PalletArrives"", ""description"": ""Pallet arrives at the working station.It takes no input. It returns no output."", ""input_parameters"": [], ""output_parameters"": [], ""actor"": ""pallet""}
","import threading

# Assuming the tools are already imported and available for use

def assemble_and_test_airplane(part_list, product_id):
    # Assemble the interior
    AssembleInterior.call(part_list=part_list, product_id=product_id)
    
    # Test flight (assuming TestSpindle simulates this)
    test_passed = TestSpindle.call(product_id=product_id)
    
    # Create and send test protocol
    if test_passed:
        test_protocol = CreateTestProtocol.call(part_list=part_list, product_id=product_id)
        DeliverTestProtocol.call(product_id=product_id, protocol=test_protocol)
        return True, test_protocol
    else:
        return False, None

def process():
    # Receive order
    part_list, product_id = ReceiveOrder.call()
    
    # Manufacture parts in parallel
    threads = []
    for part in part_list:
        if part == ""vodka bar"":
            thread = threading.Thread(target=lambda: OrderColor.call(color=1))  # Example of ordering a part
        elif part == ""whiskey bar"":
            thread = threading.Thread(target=lambda: OrderColor.call(color=2))  # Example of ordering a different part
        # Add more conditions for other parts
        threads.append(thread)
        thread.start()
    
    for thread in threads:
        thread.join()
    
    # Assemble and test airplane
    assembly_successful, test_protocol = assemble_and_test_airplane(part_list, product_id)
    
    if assembly_successful:
        # Deliver airplane to customer
        print(f""Airplane {product_id} delivered with test protocol: {test_protocol}"")
        # Assuming customer confirmation is automatic for simplicity
        return ""Delivery confirmed""
    else:
        return ""Assembly or test failed""

if __name__ == ""__main__"":
    result = process()
    print(result)"
p08,"The warehouse of Grimaldi is a warehouse that stores cardboard rolls. A cardboard roll is used to produce cardboards. There exists two types of cardboard: the white cardboard and the brown cardboard. The warehouse stores the cardboard rolls depending on the type of cardboard. When a new cardboard roll arrives at the warehouse, the worker checks the type of cardboard and enter this information inside the WMS system. The system automatically capture an image of the current status of the warehouse. By analyzing the image, the system identifies the location where the cardboard roll should be stored. Then the worker stores the cardboard rool in the identified location in the warehouse and the system updates the stock of that cardboard rolls in the warehouse.","graph LR
1:startevent:((startevent)) --> 2:task:(Check type of cardboard roll)
2:task: --> 3:task:(Enter information in WMS system)
3:task: --> 4:task:(Capture image of warehouse)
4:task: --> 5:task:(Analyze image and identify storage location)
5:task: --> 6:task:(Store cardboard roll in identified location)
6:task: --> 7:task:(Update stock in WMS system)
7:task: --> 8:endevent:((endevent))","[""check the type of the cardboard roll"", ""enter the information in the WMS system"", ""capture an image of the warehouse"", ""analyze the image and identify the storage location"", ""store the cardboard roll in the identified location"", ""update the stock of the cardboard rolls in the WMS system""]","[""check the type of the cardboard roll"", ""enter the information in the WMS system"", ""capture an image of the warehouse"", ""analyze the image and identify the storage location"", ""store the cardboard roll in the identified location"", ""update the stock of the cardboard rolls in the WMS system""]","{""name"": ""CheckTypeCardboard"", ""description"": ""Worker checks the type of cardboard.It takes no input. It returns no output."", ""input_parameters"": [], ""output_parameters"": [""type_cardboard:str""], ""actor"": ""worker""}
{""name"": ""StoreCardboardRoll"", ""description"": ""Worker stores the cardboard roll in the warehouse.It takes as input the location. It returns no output."", ""input_parameters"": [""location:str""], ""output_parameters"": [], ""actor"": ""worker""}
{""name"": ""AnalyzeWarehouse"", ""description"": ""Identify where to store a new cardboard roll.It takes as input an image of the warehouse and the type of cardboard roll. It returns the location where to store the new product."", ""input_parameters"": [""image:np.matrix"", ""type_cardboard:str""], ""output_parameters"": [""location:str""], ""actor"": ""vision_is""}
{""name"": ""OrderRawMaterial"", ""description"": ""Warehouse deparment orders the raw material.It takes the part as input. It does not return anything."", ""input_parameters"": [""part:str""], ""output_parameters"": [], ""actor"": ""wms_is""}
{""name"": ""CaptureImage"", ""description"": ""Capture of a photo of the cardboard from the camera.This tool takes no input and returns an image captured from the the camera. The image is returned as a numpy matrix."", ""input_parameters"": [], ""output_parameters"": [""image:np.matrix""], ""actor"": ""camera""}
{""name"": ""UpdateStock"", ""description"": ""Warehouse department updates the stock of a product.It takes as input the product type. It does not return anything."", ""input_parameters"": [""product_type:str""], ""output_parameters"": [], ""actor"": ""wms_is""}
","import numpy as np

# Assuming the tools are already imported and available for use as described.
# Each tool can be called using <ToolName>.call(<input_parameters_if_any>)

def process_warehouse_new_cardboard_roll():
    # Worker checks the type of cardboard roll
    type_cardboard = CheckTypeCardboard.call()
    
    # Enter information in WMS system (Assuming this is handled internally and does not require explicit coding)
    
    # Capture image of warehouse
    warehouse_image = CaptureImage.call()
    
    # Analyze image and identify storage location
    location = AnalyzeWarehouse.call(image=warehouse_image, type_cardboard=type_cardboard)
    
    # Store cardboard roll in identified location
    StoreCardboardRoll.call(location=location)
    
    # Update stock in WMS system
    UpdateStock.call(product_type=type_cardboard)
    
    return ""Process completed successfully.""

if __name__ == ""__main__"":
    result = process_warehouse_new_cardboard_roll()
    print(result)"
p09,"You want to build a tree house. First you collect your requirements, and send them to a tree house architect. The architect sends you back a draft, which you refine multiple times with additional requirements. You then create the list of needed materials from the plan. These materials fall into several categories, you order them from several online stores. While the order is processed, you send messages to several of your friends to build the house. After the house is built, you send invitations for a tree house party to your friends. In order to buy the snacks for the party, a list of people that attend the party is created.","graph LR
1:startevent:((startevent)) --> 2:task:(Collect Requirements)
2:task: --> 3:task:(Send Requirements to Architect)
3:task: --> 4:task:(Refine Draft)
4:task: --> 2:task:
4:task: --> 5:task:(Create Materials List)
5:task: --> 6:parallelgateway:{AND}
6:parallelgateway:{AND} --> 7:task:(Order Materials)
6:parallelgateway:{AND} --> 8:task:(Send Messages to Friends)
7:task: --> 6:parallelgateway:{AND}
8:task: --> 6:parallelgateway:{AND}
6:parallelgateway:{AND} --> 9:task:(Build House)
9:task: --> 10:task:(Send Invitations)
10:task: --> 11:task:(Create Party Guest List)
11:task: --> 12:endevent:((endevent))","[""collect the requirements for the tree house"", ""send the requirements to the tree house architect"", ""refine the draft with additional requirements"", ""create the list of needed materials"", ""order the materials from online stores"", ""send messages to friends to build the house"", ""build the tree house"", ""send invitations for a tree house party"", ""create a list of people attending the party""]","[""collect the requirements for the tree house"", ""send the requirements to the tree house architect"", ""refine the draft with additional requirements"", ""create the list of needed materials"", ""order the materials from online stores"", ""send messages to friends to build the house"", ""build the tree house"", ""send invitations for a tree house party"", ""create a list of people attending the party""]","{""name"": ""GenerateRequirementTreeHouse"", ""description"": ""Generate the requirement for the tree house.It takes no input. It returns the part list."", ""input_parameters"": [], ""output_parameters"": [""part_list:list""], ""actor"": ""manufacturer""}
{""name"": ""RefineRequirementsTreeHouse"", ""description"": ""Refine the requirements for the tree house.It takes the part list. It returns the refined part list."", ""input_parameters"": [""part_list:list""], ""output_parameters"": [""refined_part_list:list""], ""actor"": ""manufacturer""}
{""name"": ""AssembleTreeHouse"", ""description"": ""Assemble the tree house.It takes the part list. It does not return anything."", ""input_parameters"": [""part_list:list""], ""output_parameters"": [], ""actor"": ""manufacturer""}
{""name"": ""SendRequirementsArchitect"", ""description"": ""Send the requirements to the architect.It takes the part list. It does not return anything."", ""input_parameters"": [""part_list:list""], ""output_parameters"": [], ""actor"": ""manufacturer""}
{""name"": ""SendRequirements"", ""description"": ""Send the requirements (part list) to the proper teams.It takes the list of requirements. It does not return anything."", ""input_parameters"": [""part_list:list""], ""output_parameters"": [], ""actor"": ""manufacturer""}
{""name"": ""RetrieveRawMaterials"", ""description"": ""Warehouse deparment evaluates part list and retrieve raw materials.This tool takes as input the part list of a product. It returns a boolean indicating if all the parts are retrieved."", ""input_parameters"": [""part_list:list""], ""output_parameters"": [""retrieved:bool""], ""actor"": ""wms_is""}
{""name"": ""OrderParts"", ""description"": ""Manufacturer orders the parts online.It takes the part list. It does not return anything."", ""input_parameters"": [""part_list:list""], ""output_parameters"": [], ""actor"": ""manufacturer""}
{""name"": ""SendMessage"", ""description"": ""Send a message to people.It takes the message. It does not return anything."", ""input_parameters"": [""message:str""], ""output_parameters"": [], ""actor"": ""manufacturer""}
{""name"": ""SendInvitations"", ""description"": ""Send the invitations to the people.It takes the list of people. It does not return anything."", ""input_parameters"": [""people:list""], ""output_parameters"": [], ""actor"": ""manufacturer""}
{""name"": ""CreateListOfPeople"", ""description"": ""Create the list of people to invite.It takes no input. It returns the list of people."", ""input_parameters"": [], ""output_parameters"": [""people:list""], ""actor"": ""manufacturer""}
","import threading

def collect_and_refine_requirements():
    part_list = GenerateRequirementTreeHouse.call()
    refined_part_list = RefineRequirementsTreeHouse.call(part_list=part_list)
    while part_list != refined_part_list:
        part_list = refined_part_list
        refined_part_list = RefineRequirementsTreeHouse.call(part_list=part_list)
    return refined_part_list

def order_materials(part_list):
    OrderParts.call(part_list=part_list)

def send_messages_to_friends():
    SendMessage.call(message=""Help me build a tree house!"")

def build_tree_house(part_list):
    AssembleTreeHouse.call(part_list=part_list)

def send_invitations():
    people_list = CreateListOfPeople.call()
    SendInvitations.call(people=people_list)

def process():
    refined_part_list = collect_and_refine_requirements()
    
    # Parallel execution for ordering materials and sending messages to friends
    order_thread = threading.Thread(target=order_materials, args=(refined_part_list,))
    message_thread = threading.Thread(target=send_messages_to_friends)
    
    order_thread.start()
    message_thread.start()
    
    order_thread.join()
    message_thread.join()
    
    build_tree_house(refined_part_list)
    send_invitations()

if __name__ == ""__main__"":
    process()"
p10,"A small company manufactures customized bicycles. Whenever the sales department receives an order, a new process instance is created. A member of the sales department can then reject or accept the order for a customized bike. In the former case, the process instance is finished. In the latter case, the storehouse and the engineering department are informed. The storehouse immediately processes the part list of the order and checks the required quantity of each part. If the part is available in-house, it is reserved. If it is not available, it is back-ordered. This procedure is repeated for each item on the part list. In the meantime, the engineering department prepares everything for the assembling of the ordered bicycle. If the storehouse has successfully reserved or back-ordered every item of the part list and the preparation activity has finished, the engineering department assembles the bicycle. Afterwards, the sales department ships the bicycle to the customer and finishes the process instance.","graph LR
1:startevent:((startevent)) --> 2:task:(Receive Order)
2:task: --> 3:exclusivegateway:{x}
3:exclusivegateway:{x} --> |Reject Order| 4:endevent:((endevent))
3:exclusivegateway:{x} --> |Accept Order| 5:task:(Inform Storehouse and Engineering Department)
5:task: --> 6:task:(Process Part List)
6:task: --> 7:exclusivegateway:{x}
7:exclusivegateway:{x} --> |Part Available| 8:task:(Reserve Part)
7:exclusivegateway:{x} --> |Part Not Available| 9:task:(Back-Order Part)
8:task: --> 6:task:
9:task: --> 6:task:
7:exclusivegateway:{x} --> |All Parts Processed| 10:task:(Prepare for Assembly)
10:task: --> 11:task:(Assemble Bicycle)
11:task: --> 12:task:(Ship Bicycle to Customer)
12:task: --> 13:endevent:((endevent))","[""receive an order for a customized bike"", ""reject or accept the order"", ""finish the process instance if the order is rejected"", ""inform the storehouse and engineering department if the order is accepted"", ""process the part list and check the quantity of each part"", ""reserve the part if it is available"", ""back-order the part if it is not available"", ""repeat the procedure for each item on the part list"", ""prepare everything for the assembling of the ordered bicycle"", ""assemble the bicycle"", ""ship the bicycle to the customer and finish the process instance""]","[""receive an order for a customized bike"", ""reject or accept the order"", ""if the order is rejected, finish the process instance"", ""if the order is accepted, inform the storehouse and engineering department"", ""process the part list and check the quantity of each part"", ""if the part is available, reserve it"", ""if the part is not available, back-order it"", ""repeat the procedure for each item on the part list"", ""prepare everything for the assembling of the ordered bicycle"", ""assemble the bicycle"", ""ship the bicycle to the customer and finish the process instance""]","{""name"": ""AssembleBicycle"", ""description"": ""Assemble the bicycle.It takes the part list. It does not return anything."", ""input_parameters"": [""part_list:list""], ""output_parameters"": [], ""actor"": ""manufacturer""}
{""name"": ""AcceptOrder"", ""description"": ""Sales department accepts the order.It takes the product id as input. It returns a boolean indicating if the order is accepted."", ""input_parameters"": [""product_id:int""], ""output_parameters"": [""order_accepted:bool""], ""actor"": ""crm_is""}
{""name"": ""InformStorehouseEngineering"", ""description"": ""Inform the storehouse and the engineering departments.It takes the part list and the product id. It does not return anything."", ""input_parameters"": [""part_list:list"", ""product_id:int""], ""output_parameters"": [], ""actor"": ""manufacturer""}
{""name"": ""CheckColorQuantity"", ""description"": ""Check the quantity of the color.It takes the color as input. It returns the quantity of the color in grams."", ""input_parameters"": [""color:int""], ""output_parameters"": [""quantity:int""], ""actor"": ""manufacturer""}
{""name"": ""OrderParts"", ""description"": ""Manufacturer orders the parts online.It takes the part list. It does not return anything."", ""input_parameters"": [""part_list:list""], ""output_parameters"": [], ""actor"": ""manufacturer""}
{""name"": ""AssembleParts"", ""description"": ""Worker assembles parts.It takes no input. It returns no output."", ""input_parameters"": [], ""output_parameters"": [], ""actor"": ""worker""}
","from threading import Thread

# Assuming the tools are already imported as per the guidelines
# from tools import AcceptOrder, InformStorehouseEngineering, AssembleBicycle, CheckColorQuantity, OrderParts, AssembleParts

def process_order(product_id, part_list):
    # Accept or reject the order
    order_accepted = AcceptOrder.call(product_id=product_id)
    if not order_accepted:
        return ""Order Rejected""

    # Inform Storehouse and Engineering Department
    InformStorehouseEngineering.call(part_list=part_list, product_id=product_id)

    # Process each part in the part list
    for part in part_list:
        # Assuming part is a dictionary with 'name' and 'quantity' keys
        # Check if part is available (mock function, replace with actual implementation)
        part_available = check_part_availability(part)
        if part_available:
            reserve_part(part)  # Mock function to reserve part
        else:
            back_order_part(part)  # Mock function to back-order part

    # Prepare for assembly (mock function, replace with actual implementation)
    prepare_for_assembly()

    # Assemble the bicycle
    AssembleBicycle.call(part_list=part_list)

    # Ship the bicycle to the customer (mock function, replace with actual implementation)
    ship_bicycle_to_customer()

    return ""Order Processed and Bicycle Shipped""

def check_part_availability(part):
    # Mock implementation, replace with actual logic to check part availability
    return True

def reserve_part(part):
    # Mock implementation, replace with actual logic to reserve part
    pass

def back_order_part(part):
    # Mock implementation, replace with actual logic to back-order part
    pass

def prepare_for_assembly():
    # Mock implementation, replace with actual logic to prepare for assembly
    pass

def ship_bicycle_to_customer():
    # Mock implementation, replace with actual logic to ship bicycle
    pass

if __name__ == ""__main__"":
    product_id = 123  # Example product ID
    part_list = [{'name': 'wheel', 'quantity': 2}, {'name': 'frame', 'quantity': 1}]  # Example part list
    result = process_order(product_id, part_list)
    print(result)"
