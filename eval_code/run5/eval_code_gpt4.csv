process,input,tasks,tools,code
p01,"When a pallet arrives at the working station, the system empties the scan results. Then the worker scans the order. Afterwards the system displays the scanning UI to the worker and in parallel, the worker assembles the part.","[""empty the scan results when a pallet arrives"", ""scan the order"", ""display the scanning UI to the worker"", ""assemble the part in parallel with displaying the scanning UI""]","{""name"": ""EmptyScan"", ""description"": ""The working station system empty the scan result.It takes no input. It returns no output."", ""input_parameters"": [], ""output_parameters"": [], ""actor"": ""working_station_is""}
{""name"": ""ScanOrder"", ""description"": ""Worker scans the order.It takes no input. It returns the order id scanned."", ""input_parameters"": [], ""output_parameters"": [""order_id:int""], ""actor"": ""working_station_is""}
{""name"": ""DisplaysScanningUI"", ""description"": ""The working station system displays the scanning UI.It takes no input. It returns no output."", ""input_parameters"": [""order_id:int""], ""output_parameters"": [], ""actor"": ""working_station_is""}
{""name"": ""AssembleParts"", ""description"": ""The welding machine assemble the parts into brackets.This tool takes no input and does not return anything."", ""input_parameters"": [], ""output_parameters"": [], ""actor"": ""welding_machine""}
","def process_pallet_arrival():
    # Empty the scan results when a pallet arrives at the working station
    EmptyScan.call()
    
    # The worker scans the order and the system returns the order ID
    order_id = ScanOrder.call()
    
    # In parallel, display the scanning UI and the worker assembles the part
    DisplaysScanningUI.call(order_id=order_id)
    AssembleParts.call()

    return ""Process completed.""

if __name__ == ""__main__"":
    result = process_pallet_arrival()
    print(result)"
p02,"The calibration process of a cardboard production consists of continuously capturing a photo of the cardboard being produced. Each photo is analyzed to check if all the markers identified are ok. If markers are not ok, the calibration process continues. If the markers are ok, the speed of the die cutting machine is set to 10000 RPM and the process ends.","[""continuously capture a photo of the cardboard being produced"", ""analyze each photo to check if all markers are ok"", ""if markers are not ok, continue the calibration process"", ""if markers are ok, set the speed of the die cutting machine to 10000 RPM""]","{""name"": ""CaptureImage"", ""description"": ""Capture of a photo of the cardboard from the camera.This tool takes no input and returns an image captured from the the camera. The image is returned as a numpy matrix."", ""input_parameters"": [], ""output_parameters"": [""image:np.matrix""], ""actor"": ""camera""}
{""name"": ""StoreCardboardRoll"", ""description"": ""Worker stores the cardboard roll in the warehouse.It takes as input the location. It returns no output."", ""input_parameters"": [""location:str""], ""output_parameters"": [], ""actor"": ""worker""}
{""name"": ""CheckMarkers"", ""description"": ""Analysis of the markers on a cardboard image.This tool takes as input an image depicting a cardboard. It returns a boolean indicating if markers are present on the cardboard."", ""input_parameters"": [""image:np.matrix""], ""output_parameters"": [""markers_ok:bool""], ""actor"": ""vision_is""}
{""name"": ""SetSpeedDieMachine"", ""description"": ""set the speed of the die cutting machine.It takes as input the speed. It returns a boolean value, True if the speed has been set, False otherwise."", ""input_parameters"": [""speed:int""], ""output_parameters"": [""speed_set:bool""], ""actor"": ""die_machine""}
","import numpy as np

def calibrate_cardboard_production():
    while True:
        # Capture a photo of the cardboard
        image = CaptureImage.call()
        
        # Analyze the photo to check if all markers are ok
        markers_ok = CheckMarkers.call(image=image)
        
        # If markers are not ok, the calibration process continues (loop)
        if not markers_ok:
            continue
        
        # If markers are ok, set the speed of the die cutting machine to 10000 RPM
        speed_set = SetSpeedDieMachine.call(speed=10000)
        
        # If the speed was successfully set, end the process
        if speed_set:
            break
        else:
            # Handle the case where setting the speed fails, for robustness
            print(""Failed to set the speed of the die cutting machine. Retrying..."")
            continue

    return ""Calibration process completed successfully.""

if __name__ == ""__main__"":
    result = calibrate_cardboard_production()
    print(result)"
p03,"The manufacturing process of spindles in HSD company is fully automated. When a new order for a spindle arrives at the sales department, a new process instance is initiated. The warehouse system retrive the necessary raw materials, and in parallel the L12 line is set up for the assembly of the ordered spindle. Once the warehouse successfully retrieves the raw materials and the L12 line is set up, the spindle is assembled over the L12 line. Subsequently, the spindle undergoes testing and running-in in the smart tester. If the outcome of the test is negative, the spindle is sent to maintenance. Then, the the process ends.","[""initiate a new process instance when a new order arrives"", ""retrieve the necessary raw materials from the warehouse"", ""set up the L12 line for spindle assembly"", ""assemble the spindle over the L12 line"", ""test and run-in the spindle in the smart tester"", ""if the test outcome is negative, send the spindle to maintenance""]","{""name"": ""ReceiveOrder"", ""description"": ""Sales department receives a new order specification from customer.It takes no input. It returns the part list and the product id."", ""input_parameters"": [], ""output_parameters"": [""part_list:list"", ""product_id:int""], ""actor"": ""crm_is""}
{""name"": ""RetrieveRawMaterials"", ""description"": ""Warehouse deparment evaluates part list and retrieve raw materials.This tool takes as input the part list of a product. It returns a boolean indicating if all the parts are retrieved."", ""input_parameters"": [""part_list:list""], ""output_parameters"": [""retrieved:bool""], ""actor"": ""wms_is""}
{""name"": ""OrderRawMaterial"", ""description"": ""Warehouse deparment orders the raw material.It takes the part as input. It does not return anything."", ""input_parameters"": [""part:str""], ""output_parameters"": [], ""actor"": ""wms_is""}
{""name"": ""RetrieveRawMaterial"", ""description"": ""Warehouse department retrieves a raw material.It takes the part as input. It returns a boolean indicating if the part is retrieved."", ""input_parameters"": [""part:str""], ""output_parameters"": [""retrieved:bool""], ""actor"": ""wms_is""}
{""name"": ""L12SetUp"", ""description"": ""Set up the L12 line for spindle assembly.This tool takes no input and returns a boolean indicating if the line has been set up."", ""input_parameters"": [], ""output_parameters"": [""set_up:bool""], ""actor"": ""l12""}
{""name"": ""L12AssembleSpindle"", ""description"": ""Assembly of a spindle over the L12 line.This tool takes as input the part list of a spindle. It returns a boolean indicating if the spindle has been assembled."", ""input_parameters"": {""part_list"": {""type"": ""list"", ""description"": ""list of parts of a spindle""}}, ""output_parameters"": {""assembled"": {""type"": ""bool"", ""description"": ""True if the spindle has been assembled, False otherwise""}}, ""actor"": ""l12""}
{""name"": ""TestSpindle"", ""description"": ""Test and run-in of the spindle.It takes as input the identificator of the product to be tested. It returns a boolean value, True if the spindle passed the test, False otherwise."", ""input_parameters"": [""product_id:int""], ""output_parameters"": [""passed:bool""], ""actor"": ""smart_tester""}
","def process_spindle_order():
    # Receive a new order
    part_list, product_id = ReceiveOrder.call()

    # Initialize variables for parallel tasks
    materials_retrieved = False
    line_set_up = False

    # Retrieve raw materials and set up L12 line in parallel
    materials_retrieved = RetrieveRawMaterials.call(part_list=part_list)
    line_set_up = L12SetUp.call()

    # Check if both tasks are completed
    if materials_retrieved and line_set_up:
        # Assemble the spindle
        assembled = L12AssembleSpindle.call(part_list=part_list)
        if assembled:
            # Test the spindle
            passed = TestSpindle.call(product_id=product_id)
            if not passed:
                # If test failed, send to maintenance
                print(f""Spindle {product_id} failed the test and is sent to maintenance."")
            else:
                print(f""Spindle {product_id} passed the test and is ready for delivery."")
        else:
            print(f""Failed to assemble spindle {product_id}."")
    else:
        print(""Failed to retrieve materials or set up the L12 line."")

if __name__ == ""__main__"":
    process_spindle_order()"
p04,"When craving a custom 3D model, as a first step you have to instruct an artist to create a project for you. First you have to send him several sketches, and then tell him what to change until you are satisfied with the result. After that, you choose a plastic color you want to use for 3D printing. If you have the color at home (in stock), you check how much color you have left. If it's under 100 grams, you put it on your shopping list. If you do not have the color at home, you order it. When you have the plastic, you can turn the printer on and heat up the bed and the extruder (it continuously sends you back its status). While doing that, you can generate the gcode file for your printer out of the STL sent to you by the artist. After that you print the model.","[""instruct an artist to create a 3D model project"", ""send initial sketches to the artist"", ""revise the project until satisfied"", ""choose the plastic color for 3D printing"", ""check the quantity of the chosen color if in stock"", ""add the color to the shopping list if under 100 grams"", ""order the color if not in stock"", ""prepare the 3D printer"", ""generate the Gcode file from the STL file"", ""print the 3D model""]","{""name"": ""SendSketches"", ""description"": ""Send the sketches of the project to the artist.It takes no input. It returns the description of the project."", ""input_parameters"": [], ""output_parameters"": [""project:str""], ""actor"": ""manufacturer""}
{""name"": ""RefineRequirementsTreeHouse"", ""description"": ""Refine the requirements for the tree house.It takes the part list. It returns the refined part list."", ""input_parameters"": [""part_list:list""], ""output_parameters"": [""refined_part_list:list""], ""actor"": ""manufacturer""}
{""name"": ""ChoosePlasticColor"", ""description"": ""Choose the color of the plastic.It takes no input. It returns the color of the plastic."", ""input_parameters"": [], ""output_parameters"": [""color:int""], ""actor"": ""manufacturer""}
{""name"": ""CheckColorQuantity"", ""description"": ""Check the quantity of the color.It takes the color as input. It returns the quantity of the color in grams."", ""input_parameters"": [""color:int""], ""output_parameters"": [""quantity:int""], ""actor"": ""manufacturer""}
{""name"": ""CheckColorAvailability"", ""description"": ""Check the availability of the color.It takes the color as input. It returns the availability of the color."", ""input_parameters"": [""color:int""], ""output_parameters"": [""availability:bool""], ""actor"": ""manufacturer""}
{""name"": ""OrderColor"", ""description"": ""Order the color.It takes the color as input. It does not return anything."", ""input_parameters"": [""color:int""], ""output_parameters"": [], ""actor"": ""manufacturer""}
{""name"": ""TurnOn"", ""description"": ""Turn on the 3D printer.It takes no input. It does not return anything."", ""input_parameters"": [], ""output_parameters"": [], ""actor"": ""printer_3d""}
{""name"": ""Print"", ""description"": ""Print the object.It takes the object as input. It does not return anything."", ""input_parameters"": [""GCodeFile:str""], ""output_parameters"": [], ""actor"": ""printer_3d""}
{""name"": ""HeatUpBedExtruder"", ""description"": ""Heat up the bed and the extruder.It takes no input. It does not return anything."", ""input_parameters"": [], ""output_parameters"": [], ""actor"": ""printer_3d""}
{""name"": ""GenerateGCode"", ""description"": ""Generate the GCode file for the printer.It takes the object as input. It returns the GCode file."", ""input_parameters"": [""project:str""], ""output_parameters"": [""gcode:str""], ""actor"": ""manufacturer""}
","def create_custom_3d_model():
    # Send sketches to the artist and get the project description
    project_description = SendSketches.call()

    # Assume there's a process of refining requirements that's not detailed, but mentioned
    # This part is skipped due to lack of specific instructions

    # Choose plastic color
    color = ChoosePlasticColor.call()

    # Check color availability at home
    color_availability = CheckColorAvailability.call(color=color)

    if color_availability:
        # Check how much color is left
        color_quantity = CheckColorQuantity.call(color=color)
        if color_quantity < 100:
            # Add to shopping list if under 100 grams
            # Assuming there's a function or a way to add items to a shopping list
            add_to_shopping_list(color)
    else:
        # Order color if not available
        OrderColor.call(color=color)

    # Turn on the printer and heat up the bed and the extruder
    TurnOn.call()
    HeatUpBedExtruder.call()

    # Generate the GCode file from the project description
    gcode_file = GenerateGCode.call(project=project_description)

    # Print the model
    Print.call(GCodeFile=gcode_file)

    return ""Model creation process completed.""

def add_to_shopping_list(item):
    # Placeholder function for adding items to a shopping list
    # In a real scenario, this could involve updating a database, a file, or sending an email
    print(f""Added {item} to the shopping list."")

if __name__ == ""__main__"":
    result = create_custom_3d_model()
    print(result)"
p05,"Plastic injection molding is a manufacturing process for producing a variety of parts by injecting molten plastic material into a mold, and letting it cool and solidify into the desired end product. Our interest is in the quality assurance process which involves real-time monitoring of injection molding parameters. As each batch of molten plastic enters the mold, sensors capture data on temperature, pressure, and fill rates. The system analyzes this data to ensure that the molding parameters align with the specified standards. If any deviations are detected, the system triggers adjustments to the injection molding machine settings, allowing for immediate correction. Once the parameters are within the acceptable range, the system authorizes the production run to continue. This dynamic monitoring process guarantees the consistency and quality of the plastic molded components, minimizing the risk of defects and ensuring adherence to precise manufacturing specifications.","[""capture data on temperature, pressure, and fill rates"", ""analyze the captured data to ensure alignment with standards"", ""adjust the injection molding machine settings if deviations are detected"", ""authorize the production run to continue once parameters are within the acceptable range""]","{""name"": ""SensorMeasure"", ""description"": ""Measure the temperature, pressure and fill rates of the mold.It takes no input and returns the temperature of the oven."", ""input_parameters"": [], ""output_parameters"": [""temperature:int"", ""pressure:int"", ""fill_rate:int""], ""actor"": ""mold_is""}
{""name"": ""AnalyzeMold"", ""description"": ""Analyze the temperature, pressure and fill rates of the mold to check deviations.It takes the temperature, pressure and fill rate as input and returns a boolean indicating if the mold is ok."", ""input_parameters"": [""temperature:int"", ""pressure:int"", ""fill_rate:int""], ""output_parameters"": [""deviation:bool""], ""actor"": ""mold_is""}
{""name"": ""AdjustMold"", ""description"": ""Adjust the settings the mold.It takes no input and returns no output."", ""input_parameters"": [], ""output_parameters"": [], ""actor"": ""mold_is""}
{""name"": ""AuthorizeProduction"", ""description"": ""Authorize the production of the mold.It takes no input and returns no output."", ""input_parameters"": [], ""output_parameters"": [], ""actor"": ""mold_is""}
","def quality_assurance_process():
    # Measure the temperature, pressure, and fill rates of the mold
    temperature, pressure, fill_rate = SensorMeasure.call()
    
    # Analyze the measured parameters to check for deviations
    deviation = AnalyzeMold.call(temperature=temperature, pressure=pressure, fill_rate=fill_rate)
    
    # If there is a deviation, adjust the mold settings
    if deviation:
        AdjustMold.call()
        return ""Adjustments made. Re-check parameters.""
    else:
        # If there are no deviations, authorize the production
        AuthorizeProduction.call()
        return ""Production authorized.""

if __name__ == ""__main__"":
    result = quality_assurance_process()
    print(result)"
p06,"The production of custom metal brackets begins with order processing. The warehouse department evaluates the parts lists and in parallel the production planning department configures the robotic assembly line accordingly. The automated precision machine cuts the metal and the welding machine assembles the parts into brackets. A computer vision inspection system then checks for quality assurance. If defective brakets are detected, the process ends. After inspection, a coating system enhances durability. Finally, the process is complete.","[""process the order"", ""evaluate the parts lists"", ""configure the robotic assembly line"", ""cut the metal with precision machinery"", ""assemble the cut metal into brackets"", ""inspect the brackets with a computer vision system"", ""apply a coating to enhance durability""]","{""name"": ""AcceptOrder"", ""description"": ""Sales department accepts the order.It takes the product id as input. It returns a boolean indicating if the order is accepted."", ""input_parameters"": [""product_id:int""], ""output_parameters"": [""order_accepted:bool""], ""actor"": ""crm_is""}
{""name"": ""SendRequirements"", ""description"": ""Send the requirements (part list) to the proper teams.It takes the list of requirements. It does not return anything."", ""input_parameters"": [""part_list:list""], ""output_parameters"": [], ""actor"": ""manufacturer""}
{""name"": ""ConfigureAssemblyLine"", ""description"": ""Configure the assembly line.This tool takes no input and does not return anything."", ""input_parameters"": [], ""output_parameters"": [], ""actor"": ""assembly_line""}
{""name"": ""CutMetal"", ""description"": ""The precision machine cut the metal.This tool takes no input and does not return anything."", ""input_parameters"": [], ""output_parameters"": [], ""actor"": ""precision_machine""}
{""name"": ""AssembleParts"", ""description"": ""The welding machine assemble the parts into brackets.This tool takes no input and does not return anything."", ""input_parameters"": [], ""output_parameters"": [], ""actor"": ""welding_machine""}
{""name"": ""CheckQualityBrackets"", ""description"": ""Check the quality of the brackets.It takes no input. It returns a boolean indicating if the brackets are of good quality."", ""input_parameters"": [], ""output_parameters"": [""quality_ok:bool""], ""actor"": ""vision_is""}
{""name"": ""EnhanceProduct"", ""description"": ""The coating machine enhances the product.This tool takes no input and does not return anything."", ""input_parameters"": [], ""output_parameters"": [], ""actor"": ""coating_machine""}
","def process_brackets_production(product_id, part_list):
    # Accept the order
    order_accepted = AcceptOrder.call(product_id=product_id)
    if not order_accepted:
        return ""Order not accepted.""

    # Send requirements to the proper teams
    SendRequirements.call(part_list=part_list)

    # Configure the assembly line
    ConfigureAssemblyLine.call()

    # Cut the metal
    CutMetal.call()

    # Assemble the parts into brackets
    AssembleParts.call()

    # Check the quality of the brackets
    quality_ok = CheckQualityBrackets.call()
    if not quality_ok:
        return ""Process ended due to quality issues.""

    # Enhance the product
    EnhanceProduct.call()

    return ""Process completed successfully.""

if __name__ == ""__main__"":
    product_id = 123  # Example product ID
    part_list = ['part1', 'part2', 'part3']  # Example parts list
    result = process_brackets_production(product_id, part_list)
    print(result)"
p07,"You produce airplanes. While the base model is always the same, your customer likes to pimp their airplane with fancy interior. You let them decide between a number of 5 different bars, the number of seats, their color, and the amount of water in the toilets of their plane (you can come up with additional stuff). After you received the specifications you send the requirements to different teams to manufacture the parts. E.g. manufacturing the vodka bar is done by the Russian team, the whiskey bar is manufactured by an Irish team. After receiving the individual bits and pieces, the interior of the plane is assembled, and the plane is sent on a test flight. During the flight you create a test protocol which is sent to you and the customer. The plane is delivered to the customer, which has to confirm.","[""receive customization specifications from the customer"", ""manufacture vodka bar by Russian team"", ""manufacture whiskey bar by Irish team"", ""manufacture seats"", ""manufacture additional custom parts as per customer's request"", ""assemble the interior of the airplane"", ""conduct a test flight and create a test protocol"", ""deliver the airplane to the customer"", ""obtain confirmation from the customer""]","{""name"": ""ReceiveOrder"", ""description"": ""Sales department receives a new order specification from customer.It takes no input. It returns the part list and the product id."", ""input_parameters"": [], ""output_parameters"": [""part_list:list"", ""product_id:int""], ""actor"": ""crm_is""}
{""name"": ""BuySnacks"", ""description"": ""Buy snacks for the party.It takes the list of people. It does not return anything."", ""input_parameters"": [""people:list""], ""output_parameters"": [], ""actor"": ""manufacturer""}
{""name"": ""InformStorehouseEngineering"", ""description"": ""Inform the storehouse and the engineering departments.It takes the part list and the product id. It does not return anything."", ""input_parameters"": [""part_list:list"", ""product_id:int""], ""output_parameters"": [], ""actor"": ""manufacturer""}
{""name"": ""AssembleInterior"", ""description"": ""Assemble the interior of the plane.It takes the part list and the plane id. It does not return anything."", ""input_parameters"": [""part_list:list"", ""product_id:int""], ""output_parameters"": [], ""actor"": ""manufacturer""}
{""name"": ""OrderParts"", ""description"": ""Manufacturer orders the parts online.It takes the part list. It does not return anything."", ""input_parameters"": [""part_list:list""], ""output_parameters"": [], ""actor"": ""manufacturer""}
{""name"": ""CreateTestProtocol"", ""description"": ""Create the test protocol for the product.It takes the part list and the product id. It returns the test protocol."", ""input_parameters"": [""part_list:list"", ""product_id:int""], ""output_parameters"": [""test_protocol:str""], ""actor"": ""manufacturer""}
{""name"": ""AcceptOrder"", ""description"": ""Sales department accepts the order.It takes the product id as input. It returns a boolean indicating if the order is accepted."", ""input_parameters"": [""product_id:int""], ""output_parameters"": [""order_accepted:bool""], ""actor"": ""crm_is""}
","def process_airplane_order():
    # Receive the order from the customer
    part_list, product_id = ReceiveOrder.call()

    # Inform the storehouse and engineering departments about the new order
    InformStorehouseEngineering.call(part_list=part_list, product_id=product_id)

    # Order the parts needed for the airplane's interior
    OrderParts.call(part_list=part_list)

    # Assemble the interior of the plane
    AssembleInterior.call(part_list=part_list, product_id=product_id)

    # Create the test protocol for the airplane
    test_protocol = CreateTestProtocol.call(part_list=part_list, product_id=product_id)

    # Accept the order and check if it is accepted
    order_accepted = AcceptOrder.call(product_id=product_id)

    # Return the result of the process
    return {
        ""product_id"": product_id,
        ""order_accepted"": order_accepted,
        ""test_protocol"": test_protocol
    }

if __name__ == ""__main__"":
    result = process_airplane_order()
    print(f""Order for product ID {result['product_id']} has been {'accepted' if result['order_accepted'] else 'rejected'}."")
    print(f""Test Protocol: {result['test_protocol']}"")"
p08,"The warehouse of Grimaldi is a warehouse that stores cardboard rolls. A cardboard roll is used to produce cardboards. There exists two types of cardboard: the white cardboard and the brown cardboard. The warehouse stores the cardboard rolls depending on the type of cardboard. When a new cardboard roll arrives at the warehouse, the worker checks the type of cardboard and enter this information inside the WMS system. The system automatically capture an image of the current status of the warehouse. By analyzing the image, the system identifies the location where the cardboard roll should be stored. Then the worker stores the cardboard rool in the identified location in the warehouse and the system updates the stock of that cardboard rolls in the warehouse.","[""receive a new cardboard roll at the warehouse"", ""check the type of the cardboard roll"", ""enter the cardboard type information into the WMS system"", ""capture an image of the current warehouse status"", ""identify the storage location for the new cardboard roll"", ""store the cardboard roll in the identified location"", ""update the stock of cardboard rolls in the warehouse""]","{""name"": ""StoreCardboardRoll"", ""description"": ""Worker stores the cardboard roll in the warehouse.It takes as input the location. It returns no output."", ""input_parameters"": [""location:str""], ""output_parameters"": [], ""actor"": ""worker""}
{""name"": ""AnalyzeWarehouse"", ""description"": ""Identify where to store a new cardboard roll.It takes as input an image of the warehouse and the type of cardboard roll. It returns the location where to store the new product."", ""input_parameters"": [""image:np.matrix"", ""type_cardboard:str""], ""output_parameters"": [""location:str""], ""actor"": ""vision_is""}
{""name"": ""CheckTypeCardboard"", ""description"": ""Worker checks the type of cardboard.It takes no input. It returns no output."", ""input_parameters"": [], ""output_parameters"": [""type_cardboard:str""], ""actor"": ""worker""}
{""name"": ""InsertCardboardTypeInfo"", ""description"": ""Worker inserts the type of cardboard in the system.It takes the type of cardboard as input. It returns no output."", ""input_parameters"": [""type_cardboard:str""], ""output_parameters"": [], ""actor"": ""worker""}
{""name"": ""UpdateStock"", ""description"": ""Warehouse department updates the stock of a product.It takes as input the product type. It does not return anything."", ""input_parameters"": [""product_type:str""], ""output_parameters"": [], ""actor"": ""wms_is""}
","import numpy as np

def process_new_cardboard_roll(image: np.matrix):
    """"""
    Process a new cardboard roll arriving at the warehouse.
    
    :param image: np.matrix, an image of the current status of the warehouse.
    """"""
    # Worker checks the type of cardboard
    type_cardboard = CheckTypeCardboard.call()
    
    # Worker inserts the type of cardboard in the system
    InsertCardboardTypeInfo.call(type_cardboard=type_cardboard)
    
    # System analyzes the warehouse to identify where to store the new cardboard roll
    location = AnalyzeWarehouse.call(image=image, type_cardboard=type_cardboard)
    
    # Worker stores the cardboard roll in the identified location in the warehouse
    StoreCardboardRoll.call(location=location)
    
    # Warehouse department updates the stock of that cardboard roll
    UpdateStock.call(product_type=type_cardboard)

if __name__ == ""__main__"":
    # Example usage
    # Assuming an image of the warehouse's current status is available as a numpy matrix
    warehouse_image = np.random.rand(100, 100)  # Placeholder for an actual image
    process_new_cardboard_roll(image=warehouse_image)"
p09,"You want to build a tree house. First you collect your requirements, and send them to a tree house architect. The architect sends you back a draft, which you refine multiple times with additional requirements. You then create the list of needed materials from the plan. These materials fall into several categories, you order them from several online stores. While the order is processed, you send messages to several of your friends to build the house. After the house is built, you send invitations for a tree house party to your friends. In order to buy the snacks for the party, a list of people that attend the party is created.","[""collect your requirements for the tree house"", ""send the requirements to a tree house architect"", ""receive a draft plan from the architect"", ""refine the draft with additional requirements as needed"", ""create a list of needed materials from the final plan"", ""order the materials from several online stores"", ""message friends to help build the tree house"", ""build the tree house"", ""send invitations for a tree house party"", ""create a list of snacks for the party based on the attendees""]","{""name"": ""RefineRequirementsTreeHouse"", ""description"": ""Refine the requirements for the tree house.It takes the part list. It returns the refined part list."", ""input_parameters"": [""part_list:list""], ""output_parameters"": [""refined_part_list:list""], ""actor"": ""manufacturer""}
{""name"": ""GenerateRequirementTreeHouse"", ""description"": ""Generate the requirement for the tree house.It takes no input. It returns the part list."", ""input_parameters"": [], ""output_parameters"": [""part_list:list""], ""actor"": ""manufacturer""}
{""name"": ""AssembleTreeHouse"", ""description"": ""Assemble the tree house.It takes the part list. It does not return anything."", ""input_parameters"": [""part_list:list""], ""output_parameters"": [], ""actor"": ""manufacturer""}
{""name"": ""SendRequirementsArchitect"", ""description"": ""Send the requirements to the architect.It takes the part list. It does not return anything."", ""input_parameters"": [""part_list:list""], ""output_parameters"": [], ""actor"": ""manufacturer""}
{""name"": ""SendRequirements"", ""description"": ""Send the requirements (part list) to the proper teams.It takes the list of requirements. It does not return anything."", ""input_parameters"": [""part_list:list""], ""output_parameters"": [], ""actor"": ""manufacturer""}
{""name"": ""OrderParts"", ""description"": ""Manufacturer orders the parts online.It takes the part list. It does not return anything."", ""input_parameters"": [""part_list:list""], ""output_parameters"": [], ""actor"": ""manufacturer""}
{""name"": ""SendInvitations"", ""description"": ""Send the invitations to the people.It takes the list of people. It does not return anything."", ""input_parameters"": [""people:list""], ""output_parameters"": [], ""actor"": ""manufacturer""}
{""name"": ""BuySnacks"", ""description"": ""Buy snacks for the party.It takes the list of people. It does not return anything."", ""input_parameters"": [""people:list""], ""output_parameters"": [], ""actor"": ""manufacturer""}
","def collect_requirements():
    return GenerateRequirementTreeHouse.call()

def refine_requirements(initial_requirements):
    refined_requirements = RefineRequirementsTreeHouse.call(part_list=initial_requirements)
    return refined_requirements

def send_requirements_to_architect(requirements):
    SendRequirementsArchitect.call(part_list=requirements)

def create_material_list(final_requirements):
    # Assuming the final requirements include the material list
    return final_requirements

def order_materials(material_list):
    OrderParts.call(part_list=material_list)

def send_build_requests(material_list):
    SendRequirements.call(part_list=material_list)

def assemble_tree_house(material_list):
    AssembleTreeHouse.call(part_list=material_list)

def send_party_invitations(friends_list):
    SendInvitations.call(people=friends_list)

def buy_party_snacks(attendees_list):
    BuySnacks.call(people=attendees_list)

def tree_house_building_process():
    initial_requirements = collect_requirements()
    refined_requirements = refine_requirements(initial_requirements)
    send_requirements_to_architect(refined_requirements)
    material_list = create_material_list(refined_requirements)
    order_materials(material_list)
    send_build_requests(material_list)
    assemble_tree_house(material_list)
    friends_list = [""Alice"", ""Bob"", ""Charlie""]  # Example friends list
    send_party_invitations(friends_list)
    attendees_list = [""Alice"", ""Charlie""]  # Example attendees list, assuming some confirmations
    buy_party_snacks(attendees_list)
    print(""Tree house built and party organized successfully!"")

if __name__ == ""__main__"":
    tree_house_building_process()"
p10,"A small company manufactures customized bicycles. Whenever the sales department receives an order, a new process instance is created. A member of the sales department can then reject or accept the order for a customized bike. In the former case, the process instance is finished. In the latter case, the storehouse and the engineering department are informed. The storehouse immediately processes the part list of the order and checks the required quantity of each part. If the part is available in-house, it is reserved. If it is not available, it is back-ordered. This procedure is repeated for each item on the part list. In the meantime, the engineering department prepares everything for the assembling of the ordered bicycle. If the storehouse has successfully reserved or back-ordered every item of the part list and the preparation activity has finished, the engineering department assembles the bicycle. Afterwards, the sales department ships the bicycle to the customer and finishes the process instance.","[""receive an order"", ""reject or accept the order"", ""process the part list for required quantities"", ""reserve the part if available"", ""back-order the part if not available"", ""prepare everything for the assembling of the ordered bicycle"", ""assemble the bicycle"", ""ship the bicycle to the customer""]","{""name"": ""ReceiveOrder"", ""description"": ""Sales department receives a new order specification from customer.It takes no input. It returns the part list and the product id."", ""input_parameters"": [], ""output_parameters"": [""part_list:list"", ""product_id:int""], ""actor"": ""crm_is""}
{""name"": ""AcceptOrder"", ""description"": ""Sales department accepts the order.It takes the product id as input. It returns a boolean indicating if the order is accepted."", ""input_parameters"": [""product_id:int""], ""output_parameters"": [""order_accepted:bool""], ""actor"": ""crm_is""}
{""name"": ""SendRequirements"", ""description"": ""Send the requirements (part list) to the proper teams.It takes the list of requirements. It does not return anything."", ""input_parameters"": [""part_list:list""], ""output_parameters"": [], ""actor"": ""manufacturer""}
{""name"": ""OrderParts"", ""description"": ""Manufacturer orders the parts online.It takes the part list. It does not return anything."", ""input_parameters"": [""part_list:list""], ""output_parameters"": [], ""actor"": ""manufacturer""}
{""name"": ""AssembleBicycle"", ""description"": ""Assemble the bicycle.It takes the part list. It does not return anything."", ""input_parameters"": [""part_list:list""], ""output_parameters"": [], ""actor"": ""manufacturer""}
","def process_order():
    # Receive a new order
    part_list, product_id = ReceiveOrder.call()

    # Accept or reject the order
    order_accepted = AcceptOrder.call(product_id=product_id)
    if not order_accepted:
        return ""Order rejected.""

    # Inform storehouse and engineering department
    SendRequirements.call(part_list=part_list)

    # Assume a simplified process where the storehouse orders parts if not available
    # and the engineering department prepares for assembly simultaneously
    OrderParts.call(part_list=part_list)

    # Assemble the bicycle
    AssembleBicycle.call(part_list=part_list)

    # Ship the bicycle to the customer
    return ""Bicycle assembled and shipped to the customer.""

if __name__ == ""__main__"":
    result = process_order()
    print(result)"
