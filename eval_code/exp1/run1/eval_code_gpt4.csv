process,input,model,tasks,tasks_original,tools,code
p01,"When a pallet arrives at the working station, the system empties the scan results. Then the worker scans the order. Afterwards the system displays the scanning UI to the worker and in parallel, the worker assembles the part.","graph LR
1:startevent:((startevent)) --> 2:task:(Empty scan results)
2:task: --> 3:task:(Scan order)
3:task: --> 4:parallelgateway:{AND}
4:parallelgateway:{AND} --> 5:task:(Display scanning UI)
4:parallelgateway:{AND} --> 6:task:(Assemble part)
5:task: --> 7:parallelgateway:{AND}
6:task: --> 7:parallelgateway:{AND}
7:parallelgateway:{AND} --> 8:endevent:((endevent))","[""empty scan results upon pallet arrival"", ""worker scans the order"", ""system displays scanning UI"", ""worker assembles the part while scanning UI is displayed""]","[""empty the scan results when a pallet arrives"", ""scan the order"", ""display the scanning UI to the worker"", ""assemble the part in parallel with displaying the scanning UI""]","{""name"": ""EmptyScan"", ""description"": ""The working station system empty the scan result.It takes no input. It returns no output."", ""input_parameters"": [], ""output_parameters"": [], ""actor"": ""working_station_is""}
{""name"": ""ScanOrder"", ""description"": ""Worker scans the order.It takes no input. It returns the order id scanned."", ""input_parameters"": [], ""output_parameters"": [""order_id:int""], ""actor"": ""working_station_is""}
{""name"": ""DisplaysScanningUI"", ""description"": ""The working station system displays the scanning UI.It takes no input. It returns no output."", ""input_parameters"": [""order_id:int""], ""output_parameters"": [], ""actor"": ""working_station_is""}
{""name"": ""AssembleParts"", ""description"": ""Worker assembles parts.It takes no input. It returns no output."", ""input_parameters"": [], ""output_parameters"": [], ""actor"": ""worker""}
","import threading

# Assuming the tools are already imported and available for use as described
# EmptyScan, ScanOrder, DisplaysScanningUI, AssembleParts

def display_scanning_ui_and_assemble_parts(order_id):
    # Display scanning UI
    DisplaysScanningUI.call(order_id=order_id)
    # Assemble parts in parallel
    AssembleParts.call()

def process_pallet_arrival():
    # Empty scan results
    EmptyScan.call()
    
    # Scan order
    order_id = ScanOrder.call()
    
    # Create threads for parallel execution of displaying scanning UI and assembling parts
    thread_ui = threading.Thread(target=DisplaysScanningUI.call, args=(order_id,))
    thread_assemble = threading.Thread(target=AssembleParts.call)
    
    # Start threads
    thread_ui.start()
    thread_assemble.start()
    
    # Wait for both threads to complete
    thread_ui.join()
    thread_assemble.join()
    
    return ""Process completed.""

if __name__ == ""__main__"":
    result = process_pallet_arrival()
    print(result)"
p02,"The calibration process of a cardboard production consists of continuously capturing a photo of the cardboard being produced. Each photo is analyzed to check if all the markers identified are ok. If markers are not ok, the calibration process continues. If the markers are ok, the speed of the die cutting machine is set to 10000 RPM and the process ends.","graph LR
1:startevent:((startevent)) --> 2:task:(Capture Photo)
2:task: --> 3:task:(Analyze Photo)
3:task: --> 4:exclusivegateway:{x}
4:exclusivegateway:{x} --> |Markers not OK| 2:task:
4:exclusivegateway:{x} --> |Markers OK| 5:task:(Set Speed to 10000 RPM)
5:task: --> 6:endevent:((endevent))","[""continuously capture photos"", ""analyze photos to ensure markers are ok"", ""continue calibration if markers are not ok"", ""set die cutting machine speed to 10000 RPM if markers are ok""]","[""continuously capture a photo"", ""analyze each photo to check if all markers are ok"", ""if markers are not ok, continue the calibration process"", ""if markers are ok, set the speed of the die cutting machine to 10000 RPM""]","{""name"": ""CaptureImage"", ""description"": ""Capture of a photo from the camera.This tool takes no input and returns an image captured from the the camera. The image is returned as a numpy matrix."", ""input_parameters"": [], ""output_parameters"": [""image:np.matrix""], ""actor"": ""camera""}
{""name"": ""CheckMarkers"", ""description"": ""Analysis of the markers on a cardboard image.This tool takes as input an image depicting a cardboard. It returns a boolean indicating if markers are present on the cardboard."", ""input_parameters"": [""image:np.matrix""], ""output_parameters"": [""markers_ok:bool""], ""actor"": ""vision_is""}
{""name"": ""SetSpeedDieMachine"", ""description"": ""set the speed of the die cutting machine.It takes as input the speed. It returns a boolean value, True if the speed has been set, False otherwise."", ""input_parameters"": [""speed:int""], ""output_parameters"": [""speed_set:bool""], ""actor"": ""die_machine""}
","import numpy as np

def calibration_process():
    while True:
        photo = CaptureImage.call()
        markers_ok = CheckMarkers.call(image=photo)
        if markers_ok:
            speed_set = SetSpeedDieMachine.call(speed=10000)
            if speed_set:
                print(""Calibration process completed successfully."")
                break
            else:
                print(""Failed to set the speed of the die cutting machine."")
        else:
            print(""Markers not OK. Repeating the calibration process."")

if __name__ == ""__main__"":
    calibration_process()"
p03,"The manufacturing process of spindles in HSD company is fully automated. When a new order for a spindle arrives at the sales department, a new process instance is initiated. The warehouse system retrive the necessary raw materials, and in parallel the L12 line is set up for the assembly of the ordered spindle. Once the warehouse successfully retrieves the raw materials and the L12 line is set up, the spindle is assembled over the L12 line. Subsequently, the spindle undergoes testing and running-in in the smart tester. If the outcome of the test is negative, the spindle is sent to maintenance. Then, the the process ends.","graph LR
1:startevent:((startevent)) --> 2:task:(New order arrives)
2:task: --> 3:parallelgateway:{AND}
3:parallelgateway:{AND} --> 4:task:(Retrieve raw materials)
3:parallelgateway:{AND} --> 5:task:(Set up L12 line)
4:task: --> 6:parallelgateway:{AND}
5:task: --> 6:parallelgateway:{AND}
6:parallelgateway:{AND} --> 7:task:(Assemble spindle over L12 line)
7:task: --> 8:task:(Test and run-in spindle)
8:task: --> 9:exclusivegateway:{x}
9:exclusivegateway:{x} --> |Test Negative| 10:task:(Send to maintenance)
9:exclusivegateway:{x} --> |Test Positive| 11:endevent:((endevent))
10:task: --> 11:endevent:((endevent))","[""new spindle order is received by the sales department"", ""warehouse retrieves the necessary raw materials"", ""L12 line is prepared for spindle assembly"", ""spindle is assembled on the L12 line"", ""spindle undergoes testing and running-in in the smart tester"", ""spindle is sent to maintenance if the test outcome is negative""]","[""receive a new order for a spindle"", ""retrieve the necessary raw materials from the warehouse"", ""set up the L12 line for spindle assembly"", ""assemble the spindle over the L12 line"", ""test and run-in the spindle in the smart tester"", ""if the test outcome is negative, send the spindle to maintenance""]","{""name"": ""ReceiveOrder"", ""description"": ""Sales department receives a new order specification from customer.It takes no input. It returns the part list and the product id."", ""input_parameters"": [], ""output_parameters"": [""part_list:list"", ""product_id:int""], ""actor"": ""crm_is""}
{""name"": ""OrderRawMaterial"", ""description"": ""Warehouse deparment orders the raw material.It takes the part as input. It does not return anything."", ""input_parameters"": [""part:str""], ""output_parameters"": [], ""actor"": ""wms_is""}
{""name"": ""L12AssembleSpindle"", ""description"": ""Assembly of a spindle over the L12 line.This tool takes as input the part list of a spindle. It returns a boolean indicating if the spindle has been assembled."", ""input_parameters"": {""part_list"": {""type"": ""list"", ""description"": ""list of parts of a spindle""}}, ""output_parameters"": {""assembled"": {""type"": ""bool"", ""description"": ""True if the spindle has been assembled, False otherwise""}}, ""actor"": ""l12""}
{""name"": ""L12SetUp"", ""description"": ""Set up the L12 line for spindle assembly.This tool takes no input and returns a boolean indicating if the line has been set up."", ""input_parameters"": [], ""output_parameters"": [""set_up:bool""], ""actor"": ""l12""}
{""name"": ""TestSpindle"", ""description"": ""Test and run-in of the spindle.It takes as input the identificator of the product to be tested. It returns a boolean value, True if the spindle passed the test, False otherwise."", ""input_parameters"": [""product_id:int""], ""output_parameters"": [""passed:bool""], ""actor"": ""smart_tester""}
","import threading

# Assuming the tools are already imported as per the guidelines
# from tools import ReceiveOrder, OrderRawMaterial, L12AssembleSpindle, L12SetUp, TestSpindle

def retrieve_raw_materials(part_list):
    for part in part_list:
        OrderRawMaterial.call(part=part)

def set_up_L12_line():
    return L12SetUp.call()

def assemble_spindle(part_list):
    return L12AssembleSpindle.call(part_list=part_list)

def test_spindle(product_id):
    return TestSpindle.call(product_id=product_id)

def process():
    # Receive order
    part_list, product_id = ReceiveOrder.call()

    # Parallel execution for retrieving raw materials and setting up L12 line
    threads = []
    t1 = threading.Thread(target=retrieve_raw_materials, args=(part_list,))
    t2 = threading.Thread(target=set_up_L12_line)
    threads.append(t1)
    threads.append(t2)
    t1.start()
    t2.start()
    for t in threads:
        t.join()

    # Assemble spindle
    assembled = assemble_spindle(part_list)
    if not assembled:
        return ""Error in assembling spindle""

    # Test spindle
    passed = test_spindle(product_id)
    if not passed:
        # Send to maintenance
        print(""Spindle sent to maintenance"")
        return ""Process ended with maintenance""

    return ""Process successfully completed""

if __name__ == ""__main__"":
    result = process()
    print(result)"
p04,"When craving a custom 3D model, as a first step you have to instruct an artist to create a project for you. First you have to send him several sketches, and then tell him what to change until you are satisfied with the result. After that, you choose a plastic color you want to use for 3D printing. If you have the color at home (in stock), you check how much color you have left. If it's under 100 grams, you put it on your shopping list. If you do not have the color at home, you order it. When you have the plastic, you can turn the printer on and heat up the bed and the extruder (it continuously sends you back its status). While doing that, you can generate the gcode file for your printer out of the STL sent to you by the artist. After that you print the model.","graph LR
1:startevent:((startevent)) --> 2:task:(Instruct Artist)
2:task: --> 3:task:(Send Sketches)
3:task: --> 4:task:(Revise Project)
4:task: --> 5:exclusivegateway:{x}
5:exclusivegateway:{x} --> |Satisfied| 6:task:(Choose Plastic Color)
5:exclusivegateway:{x} --> |Not Satisfied| 3:task:
6:task: --> 7:exclusivegateway:{x}
7:exclusivegateway:{x} --> |Color In Stock| 8:task:(Check Color Quantity)
7:exclusivegateway:{x} --> |Color Not In Stock| 9:task:(Order Color)
8:task: --> 10:exclusivegateway:{x}
10:exclusivegateway:{x} --> |Under 100g| 11:task:(Add to Shopping List)
10:exclusivegateway:{x} --> |100g or More| 12:task:(Prepare Printer)
9:task: --> 12:task:
12:task: --> 13:parallelgateway:{AND}
13:parallelgateway:{AND} --> 14:task:(Heat Up Printer)
13:parallelgateway:{AND} --> 15:task:(Generate Gcode)
14:task: --> 16:parallelgateway:{AND}
15:task: --> 16:parallelgateway:{AND}
16:parallelgateway:{AND} --> 17:task:(Print Model)
17:task: --> 18:endevent:((endevent))","[""instruct an artist to create a project based on initial sketches"", ""send sketches and provide feedback until satisfied with the design"", ""select the desired plastic color for the model"", ""check stock for the selected color and its quantity"", ""add the color to the shopping list if quantity is below 100 grams"", ""order the plastic color if it's not available in stock"", ""start the preparation of the 3D printer"", ""heat the printer's bed and extruder while monitoring its status"", ""convert the STL file to gcode for printing"", ""execute the 3D printing of the model""]","[""instruct an artist to create a 3D model project"", ""send initial sketches to the artist"", ""revise the project until satisfied"", ""choose the plastic color for 3D printing"", ""check the quantity of the chosen color if in stock"", ""add the color to the shopping list if under 100 grams"", ""order the color if not in stock"", ""prepare the 3D printer"", ""heat up the printer's bed and extruder"", ""generate the gcode file from the STL file"", ""print the 3D model""]","{""name"": ""SendSketches"", ""description"": ""Send the sketches of the project to the artist.It takes no input. It returns the description of the project."", ""input_parameters"": [], ""output_parameters"": [""project:str""], ""actor"": ""manufacturer""}
{""name"": ""ChoosePlasticColor"", ""description"": ""Choose the color of the plastic.It takes no input. It returns the color of the plastic."", ""input_parameters"": [], ""output_parameters"": [""color:int""], ""actor"": ""manufacturer""}
{""name"": ""CheckColorQuantity"", ""description"": ""Check the quantity of the color.It takes the color as input. It returns the quantity of the color in grams."", ""input_parameters"": [""color:int""], ""output_parameters"": [""quantity:int""], ""actor"": ""manufacturer""}
{""name"": ""TurnOn"", ""description"": ""Turn on the 3D printer.It takes no input. It does not return anything."", ""input_parameters"": [], ""output_parameters"": [], ""actor"": ""printer_3d""}
{""name"": ""HeatUpBedExtruder"", ""description"": ""Heat up the bed and the extruder.It takes no input. It does not return anything."", ""input_parameters"": [], ""output_parameters"": [], ""actor"": ""printer_3d""}
{""name"": ""GenerateGCode"", ""description"": ""Generate the GCode file for the printer.It takes the object as input. It returns the GCode file."", ""input_parameters"": [""project:str""], ""output_parameters"": [""gcode:str""], ""actor"": ""manufacturer""}
{""name"": ""Print"", ""description"": ""Print the object.It takes the object as input. It does not return anything."", ""input_parameters"": [""GCodeFile:str""], ""output_parameters"": [], ""actor"": ""printer_3d""}
","import threading

# Assuming the tools are already imported and available for use as described in the problem description.

def instruct_artist_and_get_project():
    project_description = SendSketches.call()
    satisfied = False
    while not satisfied:
        # Assuming there's a function to review the project and decide if satisfied or not.
        # This could be a user input or an automated check.
        satisfied = input(""Are you satisfied with the project? (yes/no): "").lower() == ""yes""
        if not satisfied:
            # Assuming a function to send revisions to the artist.
            # This could be a user input or an automated process.
            print(""Sending revisions to the artist..."")
            project_description = SendSketches.call()  # Simulating the revision process
    return project_description

def check_and_prepare_color():
    color = ChoosePlasticColor.call()
    quantity = CheckColorQuantity.call(color=color)
    if quantity < 100:
        print(""Adding color to shopping list..."")
        # Assuming a function to add items to a shopping list.
        # This could be a user input or an automated process.
    else:
        print(""Color quantity is sufficient."")
    return color

def prepare_printer(project_description):
    TurnOn.call()
    HeatUpBedExtruder.call()
    gcode = GenerateGCode.call(project=project_description)
    return gcode

def print_model(gcode):
    Print.call(GCodeFile=gcode)

def process():
    project_description = instruct_artist_and_get_project()
    check_and_prepare_color()
    gcode = prepare_printer(project_description)
    print_model(gcode)
    print(""Model printing process completed."")

if __name__ == ""__main__"":
    process()"
p05,"Plastic injection molding is a manufacturing process for producing a variety of parts by injecting molten plastic material into a mold, and letting it cool and solidify into the desired end product. Our interest is in the quality assurance process which involves real-time monitoring of injection molding parameters. As each batch of molten plastic enters the mold, sensors capture data on temperature, pressure, and fill rates. The system analyzes this data to ensure that the molding parameters align with the specified standards. If any deviations are detected, the system triggers adjustments to the injection molding machine settings, allowing for immediate correction. Once the parameters are within the acceptable range, the system authorizes the production run to continue. This dynamic monitoring process guarantees the consistency and quality of the plastic molded components, minimizing the risk of defects and ensuring adherence to precise manufacturing specifications.","graph LR
1:startevent:((startevent)) --> 2:task:(Capture Data)
2:task: --> 3:task:(Analyze Data)
3:task: --> 4:exclusivegateway:{x}
4:exclusivegateway:{x} --> |Deviations Detected| 5:task:(Adjust Machine Settings)
5:task: --> 2:task:
4:exclusivegateway:{x} --> |Parameters Acceptable| 6:task:(Authorize Production)
6:task: --> 7:endevent:((endevent))","[""capture temperature, pressure, and fill rates data"", ""analyze data for standard alignment"", ""adjust machine settings for deviations"", ""authorize continuation of production run""]","[""capture data on temperature, pressure, and fill rates"", ""analyze the captured data to ensure alignment with standards"", ""adjust the injection molding machine settings if deviations are detected"", ""authorize the production run to continue once parameters are within the acceptable range""]","{""name"": ""SensorMeasure"", ""description"": ""Measure the temperature, pressure and fill rates of the mold.It takes no input and returns the temperature of the oven."", ""input_parameters"": [], ""output_parameters"": [""temperature:int"", ""pressure:int"", ""fill_rate:int""], ""actor"": ""mold_is""}
{""name"": ""AnalyzeMold"", ""description"": ""Analyze the temperature, pressure and fill rates of the mold to check deviations.It takes the temperature, pressure and fill rate as input and returns a boolean indicating if the mold is ok."", ""input_parameters"": [""temperature:int"", ""pressure:int"", ""fill_rate:int""], ""output_parameters"": [""deviation:bool""], ""actor"": ""mold_is""}
{""name"": ""AdjustMold"", ""description"": ""Adjust the settings the mold.It takes no input and returns no output."", ""input_parameters"": [], ""output_parameters"": [], ""actor"": ""mold_is""}
{""name"": ""AuthorizeProduction"", ""description"": ""Authorize the production of the mold.It takes no input and returns no output."", ""input_parameters"": [], ""output_parameters"": [], ""actor"": ""mold_is""}
","class ProcessControl:

    def capture_and_analyze_data(self):
        temperature, pressure, fill_rate = SensorMeasure.call()
        deviation = AnalyzeMold.call(temperature=temperature, pressure=pressure, fill_rate=fill_rate)
        return deviation

    def adjust_machine_settings(self):
        AdjustMold.call()

    def authorize_production(self):
        AuthorizeProduction.call()

    def start_process(self):
        while True:
            parameters_acceptable = self.capture_and_analyze_data()
            if not parameters_acceptable:
                self.adjust_machine_settings()
            else:
                self.authorize_production()
                break

if __name__ == ""__main__"":
    process_control = ProcessControl()
    process_control.start_process()"
p06,"The production of custom metal brackets begins with order processing. The warehouse department evaluates the parts lists and in parallel the production planning department configures the robotic assembly line accordingly. The automated precision machine cuts the metal and the welding machine assembles the parts into brackets. A computer vision inspection system then checks for quality assurance. If defective brakets are detected, the process ends. After inspection, a coating system enhances durability. Finally, the process is complete.","graph LR
1:startevent:((startevent)) --> 2:task:(Order Processing)
2:task: --> 3:parallelgateway:{AND}
3:parallelgateway:{AND} --> 4:task:(Evaluate Parts Lists)
3:parallelgateway:{AND} --> 5:task:(Configure Robotic Assembly Line)
4:task: --> 6:parallelgateway:{AND}
5:task: --> 6:parallelgateway:{AND}
6:parallelgateway:{AND} --> 7:task:(Cut Metal)
7:task: --> 8:task:(Assemble Brackets)
8:task: --> 9:task:(Inspect Brackets)
9:task: --> 10:exclusivegateway:{x}
10:exclusivegateway:{x} --> |Defective| 11:endevent:((endevent))
10:exclusivegateway:{x} --> |No Defects| 12:task:(Apply Coating)
12:task: --> 13:endevent:((endevent))","[""process the customer order"", ""warehouse department evaluates the parts lists"", ""production planning department configures the robotic assembly line"", ""automated precision machine cuts the metal"", ""welding machine assembles the parts into brackets"", ""computer vision inspection system checks for quality assurance"", ""apply a coating to enhance durability of the brackets""]","[""process the order"", ""evaluate the parts lists"", ""configure the robotic assembly line"", ""cut the metal with precision machinery"", ""assemble the metal parts into brackets"", ""inspect the brackets for quality assurance"", ""apply a coating to enhance durability""]","{""name"": ""AcceptOrder"", ""description"": ""Sales department accepts the order.It takes the product id as input. It returns a boolean indicating if the order is accepted."", ""input_parameters"": [""product_id:int""], ""output_parameters"": [""order_accepted:bool""], ""actor"": ""crm_is""}
{""name"": ""RetrieveRawMaterials"", ""description"": ""Warehouse deparment evaluates part list and retrieve raw materials.This tool takes as input the part list of a product. It returns a boolean indicating if all the parts are retrieved."", ""input_parameters"": [""part_list:list""], ""output_parameters"": [""retrieved:bool""], ""actor"": ""wms_is""}
{""name"": ""ConfigureAssemblyLine"", ""description"": ""Configure the assembly line.This tool takes no input and does not return anything."", ""input_parameters"": [], ""output_parameters"": [], ""actor"": ""assembly_line""}
{""name"": ""CutMetal"", ""description"": ""The precision machine cut the metal.This tool takes no input and does not return anything."", ""input_parameters"": [], ""output_parameters"": [], ""actor"": ""precision_machine""}
{""name"": ""AssembleParts"", ""description"": ""The welding machine assemble the parts into brackets.This tool takes no input and does not return anything."", ""input_parameters"": [], ""output_parameters"": [], ""actor"": ""welding_machine""}
{""name"": ""CheckQualityBrackets"", ""description"": ""Check the quality of the brackets.It takes no input. It returns a boolean indicating if the brackets are of good quality."", ""input_parameters"": [], ""output_parameters"": [""quality_ok:bool""], ""actor"": ""vision_is""}
{""name"": ""EnhanceProduct"", ""description"": ""The coating machine enhances the product.This tool takes no input and does not return anything."", ""input_parameters"": [], ""output_parameters"": [], ""actor"": ""coating_machine""}
","import threading

# Assuming the tools are already imported as per the guidelines
# from tools import AcceptOrder, RetrieveRawMaterials, ConfigureAssemblyLine, CutMetal, AssembleParts, CheckQualityBrackets, EnhanceProduct

def process_order(product_id, part_list):
    # Accept the order
    order_accepted = AcceptOrder.call(product_id=product_id)
    if not order_accepted:
        return ""Order not accepted""

    # Define a function to handle parallel tasks
    def handle_parallel_tasks():
        # Evaluate parts lists and retrieve raw materials
        retrieved = RetrieveRawMaterials.call(part_list=part_list)
        # Configure the robotic assembly line
        ConfigureAssemblyLine.call()
        return retrieved

    # Execute parallel tasks
    thread = threading.Thread(target=handle_parallel_tasks)
    thread.start()
    thread.join()

    # Proceed with the production process
    CutMetal.call()
    AssembleParts.call()

    # Inspect brackets
    quality_ok = CheckQualityBrackets.call()
    if not quality_ok:
        return ""Process ended due to defective brackets""

    # Apply coating
    EnhanceProduct.call()

    return ""Process completed successfully""

if __name__ == ""__main__"":
    product_id = 123  # Example product ID
    part_list = ['part1', 'part2', 'part3']  # Example part list
    result = process_order(product_id, part_list)
    print(result)"
p07,"You produce airplanes. While the base model is always the same, your customer likes to pimp their airplane with fancy interior. You let them decide between a number of 5 different bars, the number of seats, their color, and the amount of water in the toilets of their plane (you can come up with additional stuff). After you received the specifications you send the requirements to different teams to manufacture the parts. E.g. manufacturing the vodka bar is done by the Russian team, the whiskey bar is manufactured by an Irish team. After receiving the individual bits and pieces, the interior of the plane is assembled, and the plane is sent on a test flight. During the flight you create a test protocol which is sent to you and the customer. The plane is delivered to the customer, which has to confirm.","graph LR
1:startevent:((startevent)) --> 2:task:(Receive airplane customization specifications)
2:task: --> 3:parallelgateway:{AND}
3:parallelgateway:{AND} --> 4:task:(Manufacture vodka bar)
3:parallelgateway:{AND} --> 5:task:(Manufacture whiskey bar)
3:parallelgateway:{AND} --> 6:task:(Manufacture seats)
3:parallelgateway:{AND} --> 7:task:(Manufacture additional custom parts)
4:task: --> 8:parallelgateway:{AND}
5:task: --> 8:parallelgateway:{AND}
6:task: --> 8:parallelgateway:{AND}
7:task: --> 8:parallelgateway:{AND}
8:parallelgateway:{AND} --> 9:task:(Assemble interior)
9:task: --> 10:task:(Test flight and create protocol)
10:task: --> 11:task:(Deliver plane to customer)
11:task: --> 12:task:(Customer confirmation)
12:task: --> 13:endevent:((endevent))","[""receive the customer's specifications for airplane customization"", ""Russian team manufactures the vodka bar"", ""Irish team manufactures the whiskey bar"", ""manufacture the specified seats in number and color"", ""manufacture additional custom parts as per customer's specifications"", ""assemble the airplane's interior with all manufactured parts"", ""conduct a test flight and create a test protocol"", ""deliver the airplane to the customer"", ""obtain the customer's confirmation of delivery""]","[""receive customization specifications from the customer"", ""manufacture vodka bar by the Russian team"", ""manufacture whiskey bar by the Irish team"", ""manufacture the specified number and color of seats"", ""manufacture additional custom parts as specified by the customer"", ""assemble the interior of the airplane with all manufactured parts"", ""conduct a test flight and create a test protocol"", ""deliver the airplane to the customer"", ""obtain confirmation from the customer""]","{""name"": ""ReceiveOrder"", ""description"": ""Sales department receives a new order specification from customer.It takes no input. It returns the part list and the product id."", ""input_parameters"": [], ""output_parameters"": [""part_list:list"", ""product_id:int""], ""actor"": ""crm_is""}
{""name"": ""OrderColor"", ""description"": ""Order the color.It takes the color as input. It does not return anything."", ""input_parameters"": [""color:int""], ""output_parameters"": [], ""actor"": ""manufacturer""}
{""name"": ""OrderParts"", ""description"": ""Manufacturer orders the parts online.It takes the part list. It does not return anything."", ""input_parameters"": [""part_list:list""], ""output_parameters"": [], ""actor"": ""manufacturer""}
{""name"": ""AssembleInterior"", ""description"": ""Assemble the interior of the plane.It takes the part list and the plane id. It does not return anything."", ""input_parameters"": [""part_list:list"", ""product_id:int""], ""output_parameters"": [], ""actor"": ""manufacturer""}
{""name"": ""CreateTestProtocol"", ""description"": ""Create the test protocol for the product.It takes the part list and the product id. It returns the test protocol."", ""input_parameters"": [""part_list:list"", ""product_id:int""], ""output_parameters"": [""test_protocol:str""], ""actor"": ""manufacturer""}
","import threading

# Assuming the tools are already imported and available for use

def manufacture_parts(part_list, product_id):
    # Manufacture parts in parallel as per the process model
    threads = []
    for part in part_list:
        if part == ""vodka bar"":
            thread = threading.Thread(target=OrderParts.call, args=([part],))
            threads.append(thread)
        elif part == ""whiskey bar"":
            thread = threading.Thread(target=OrderParts.call, args=([part],))
            threads.append(thread)
        elif part == ""seats"":
            thread = threading.Thread(target=OrderParts.call, args=([part],))
            threads.append(thread)
        elif part == ""additional custom parts"":
            thread = threading.Thread(target=OrderParts.call, args=([part],))
            threads.append(thread)
        # Assuming there could be more parts, handle them generically
        else:
            thread = threading.Thread(target=OrderParts.call, args=([part],))
            threads.append(thread)
    
    # Start all threads
    for thread in threads:
        thread.start()
    
    # Wait for all threads to complete
    for thread in threads:
        thread.join()

def process():
    # Receive airplane customization specifications
    part_list, product_id = ReceiveOrder.call()
    
    # Manufacture parts (in parallel)
    manufacture_parts(part_list, product_id)
    
    # Assemble interior
    AssembleInterior.call(part_list=part_list, product_id=product_id)
    
    # Test flight and create protocol
    test_protocol = CreateTestProtocol.call(part_list=part_list, product_id=product_id)
    
    # Deliver plane to customer and wait for confirmation
    # Assuming a function DeliverPlane exists for delivery and confirmation
    # This is a placeholder for the delivery and confirmation process
    # DeliverPlane.call(product_id=product_id, test_protocol=test_protocol)
    
    return test_protocol

if __name__ == ""__main__"":
    test_protocol = process()
    print(f""Test Protocol: {test_protocol}"")"
p08,"The warehouse of Grimaldi is a warehouse that stores cardboard rolls. A cardboard roll is used to produce cardboards. There exists two types of cardboard: the white cardboard and the brown cardboard. The warehouse stores the cardboard rolls depending on the type of cardboard. When a new cardboard roll arrives at the warehouse, the worker checks the type of cardboard and enter this information inside the WMS system. The system automatically capture an image of the current status of the warehouse. By analyzing the image, the system identifies the location where the cardboard roll should be stored. Then the worker stores the cardboard rool in the identified location in the warehouse and the system updates the stock of that cardboard rolls in the warehouse.","graph LR
1:startevent:((startevent)) --> 2:task:(Check Cardboard Type)
2:task: --> 3:task:(Enter Information in WMS)
3:task: --> 4:task:(Capture Image of Warehouse)
4:task: --> 5:task:(Identify Storage Location)
5:task: --> 6:task:(Store Cardboard Roll)
6:task: --> 7:task:(Update Stock in System)
7:task: --> 8:endevent:((endevent))","[""check the type of the new cardboard roll"", ""enter the cardboard type information into the WMS system"", ""system captures an image of the current warehouse status"", ""system identifies the storage location for the new cardboard roll"", ""store the cardboard roll in the identified location"", ""update the stock of cardboard rolls in the warehouse""]","[""check the type of the new cardboard roll"", ""enter the cardboard type information into the WMS system"", ""capture an image of the current warehouse status"", ""identify the storage location for the new cardboard roll"", ""store the cardboard roll in the identified location"", ""update the stock of cardboard rolls in the warehouse""]","{""name"": ""CheckTypeCardboard"", ""description"": ""Worker checks the type of cardboard.It takes no input. It returns no output."", ""input_parameters"": [], ""output_parameters"": [""type_cardboard:str""], ""actor"": ""worker""}
{""name"": ""InsertCardboardTypeInfo"", ""description"": ""Worker inserts the type of cardboard in the system.It takes the type of cardboard as input. It returns no output."", ""input_parameters"": [""type_cardboard:str""], ""output_parameters"": [], ""actor"": ""worker""}
{""name"": ""AnalyzeWarehouse"", ""description"": ""Identify where to store a new cardboard roll.It takes as input an image of the warehouse and the type of cardboard roll. It returns the location where to store the new product."", ""input_parameters"": [""image:np.matrix"", ""type_cardboard:str""], ""output_parameters"": [""location:str""], ""actor"": ""vision_is""}
{""name"": ""StoreCardboardRoll"", ""description"": ""Worker stores the cardboard roll in the warehouse.It takes as input the location. It returns no output."", ""input_parameters"": [""location:str""], ""output_parameters"": [], ""actor"": ""worker""}
","import numpy as np

# Assuming the necessary tool classes are already imported as per the guidelines.

def capture_image_of_warehouse():
    # Placeholder function to simulate capturing an image of the warehouse.
    # In a real scenario, this would interface with a camera system.
    # Here, it returns a dummy np.matrix representing an image.
    return np.matrix([[0]])

def update_stock_in_system(type_cardboard):
    # Placeholder function to simulate updating the stock in the system.
    # In a real scenario, this would interface with the WMS system.
    # Here, it just prints an update message.
    print(f""Stock updated for {type_cardboard} cardboard roll."")

def process_new_cardboard_roll():
    # Worker checks the type of cardboard.
    type_cardboard = CheckTypeCardboard.call()
    
    # Worker inserts the type of cardboard in the system.
    InsertCardboardTypeInfo.call(type_cardboard=type_cardboard)
    
    # Capture an image of the current status of the warehouse.
    image = capture_image_of_warehouse()
    
    # System identifies the location where the cardboard roll should be stored.
    location = AnalyzeWarehouse.call(image=image, type_cardboard=type_cardboard)
    
    # Worker stores the cardboard roll in the identified location in the warehouse.
    StoreCardboardRoll.call(location=location)
    
    # System updates the stock of that cardboard rolls in the warehouse.
    update_stock_in_system(type_cardboard)

if __name__ == ""__main__"":
    process_new_cardboard_roll()"
p09,"You want to build a tree house. First you collect your requirements, and send them to a tree house architect. The architect sends you back a draft, which you refine multiple times with additional requirements. You then create the list of needed materials from the plan. These materials fall into several categories, you order them from several online stores. While the order is processed, you send messages to several of your friends to build the house. After the house is built, you send invitations for a tree house party to your friends. In order to buy the snacks for the party, a list of people that attend the party is created.","graph LR
1:startevent:((startevent)) --> 2:task:(Collect Requirements)
2:task: --> 3:task:(Send Requirements to Architect)
3:task: --> 4:task:(Receive Draft from Architect)
4:task: --> 5:exclusivegateway:{x}
5:exclusivegateway:{x} --> |Additional Requirements| 6:task:(Refine Draft)
6:task: --> 4:task:
5:exclusivegateway:{x} --> |No Additional Requirements| 7:task:(Create List of Materials)
7:task: --> 8:parallelgateway:{AND}
8:parallelgateway:{AND} --> 9:task:(Order Materials Online)
8:parallelgateway:{AND} --> 10:task:(Message Friends for Help)
9:task: --> 11:parallelgateway:{AND}
10:task: --> 11:parallelgateway:{AND}
11:parallelgateway:{AND} --> 12:task:(Build Tree House)
12:task: --> 13:task:(Send Party Invitations)
13:task: --> 14:task:(Create Snack List)
14:task: --> 15:endevent:((endevent))","[""collect requirements for the tree house"", ""send requirements to the architect"", ""receive and review draft plan from the architect"", ""refine the draft plan with additional requirements"", ""list materials needed based on the final plan"", ""order materials from various online stores"", ""recruit friends to assist in building the tree house"", ""construct the tree house"", ""invite friends to the tree house party"", ""prepare a snack list based on party attendees""]","[""collect your requirements for the tree house"", ""send requirements to a tree house architect"", ""receive draft plan from architect"", ""refine the draft plan with additional requirements as needed"", ""create a list of needed materials from the final plan"", ""order materials from several online stores"", ""message friends to help build the tree house"", ""build the tree house"", ""send invitations for a tree house party"", ""create a list of snacks for the party based on the attendees""]","{""name"": ""GenerateRequirementTreeHouse"", ""description"": ""Generate the requirement for the tree house.It takes no input. It returns the part list."", ""input_parameters"": [], ""output_parameters"": [""part_list:list""], ""actor"": ""manufacturer""}
{""name"": ""SendRequirementsArchitect"", ""description"": ""Send the requirements to the architect.It takes the part list. It does not return anything."", ""input_parameters"": [""part_list:list""], ""output_parameters"": [], ""actor"": ""manufacturer""}
{""name"": ""RefineRequirementsTreeHouse"", ""description"": ""Refine the requirements for the tree house.It takes the part list. It returns the refined part list."", ""input_parameters"": [""part_list:list""], ""output_parameters"": [""refined_part_list:list""], ""actor"": ""manufacturer""}
{""name"": ""OrderParts"", ""description"": ""Manufacturer orders the parts online.It takes the part list. It does not return anything."", ""input_parameters"": [""part_list:list""], ""output_parameters"": [], ""actor"": ""manufacturer""}
{""name"": ""AssembleTreeHouse"", ""description"": ""Assemble the tree house.It takes the part list. It does not return anything."", ""input_parameters"": [""part_list:list""], ""output_parameters"": [], ""actor"": ""manufacturer""}
{""name"": ""BuySnacks"", ""description"": ""Buy snacks for the party.It takes the list of people. It does not return anything."", ""input_parameters"": [""people:list""], ""output_parameters"": [], ""actor"": ""manufacturer""}
","import threading

def collect_requirements_and_send_to_architect():
    part_list = GenerateRequirementTreeHouse.call()
    SendRequirementsArchitect.call(part_list=part_list)
    return part_list

def refine_requirements(part_list):
    refined_part_list = RefineRequirementsTreeHouse.call(part_list=part_list)
    return refined_part_list

def order_materials(part_list):
    OrderParts.call(part_list=part_list)

def message_friends_for_help():
    # Assuming there's a function or a way to message friends which is not detailed in the tools.
    # This is a placeholder for the actual implementation.
    print(""Messaging friends for help..."")

def build_tree_house(part_list):
    AssembleTreeHouse.call(part_list=part_list)

def send_party_invitations():
    # Assuming there's a function or a way to send party invitations which is not detailed in the tools.
    # This is a placeholder for the actual implementation.
    print(""Sending party invitations..."")

def create_snack_list():
    # Assuming the list of people attending is obtained from the responses to the invitations.
    # This is a placeholder for the actual implementation.
    people_attending = [""Alice"", ""Bob"", ""Charlie""]
    BuySnacks.call(people=people_attending)

def process():
    part_list = collect_requirements_and_send_to_architect()
    while True:
        # Assuming there's a way to check if additional requirements are needed which is not detailed in the tools.
        # This is a placeholder for the actual decision-making process.
        additional_requirements_needed = input(""Are additional requirements needed? (yes/no): "")
        if additional_requirements_needed.lower() == 'yes':
            part_list = refine_requirements(part_list)
        else:
            break

    # Parallel tasks for ordering materials and messaging friends
    order_thread = threading.Thread(target=order_materials, args=(part_list,))
    message_thread = threading.Thread(target=message_friends_for_help)
    order_thread.start()
    message_thread.start()
    order_thread.join()
    message_thread.join()

    build_tree_house(part_list)
    send_party_invitations()
    create_snack_list()

if __name__ == ""__main__"":
    process()"
p10,"A small company manufactures customized bicycles. Whenever the sales department receives an order, a new process instance is created. A member of the sales department can then reject or accept the order for a customized bike. In the former case, the process instance is finished. In the latter case, the storehouse and the engineering department are informed. The storehouse immediately processes the part list of the order and checks the required quantity of each part. If the part is available in-house, it is reserved. If it is not available, it is back-ordered. This procedure is repeated for each item on the part list. In the meantime, the engineering department prepares everything for the assembling of the ordered bicycle. If the storehouse has successfully reserved or back-ordered every item of the part list and the preparation activity has finished, the engineering department assembles the bicycle. Afterwards, the sales department ships the bicycle to the customer and finishes the process instance.","graph LR
1:startevent:((startevent)) --> 2:task:(Receive Order)
2:task: --> 3:exclusivegateway:{x}
3:exclusivegateway:{x} --> |Order Rejected| 4:endevent:((endevent))
3:exclusivegateway:{x} --> |Order Accepted| 5:parallelgateway:{AND}
5:parallelgateway:{AND} --> 6:task:(Process Part List)
5:parallelgateway:{AND} --> 7:task:(Prepare for Assembling)
6:task: --> 8:exclusivegateway:{x}
8:exclusivegateway:{x} --> |Part Available| 9:task:(Reserve Part)
8:exclusivegateway:{x} --> |Part Not Available| 10:task:(Back-Order Part)
9:task: --> 11:task:(Check Next Part)
10:task: --> 11:task:
11:task: --> |Parts Left| 8:exclusivegateway:{x}
11:task: --> |No Parts Left| 12:parallelgateway:{AND}
7:task: --> 12:parallelgateway:{AND}
12:parallelgateway:{AND} --> 13:task:(Assemble Bicycle)
13:task: --> 14:task:(Ship Bicycle)
14:task: --> 15:endevent:((endevent))","[""receive an order and initiate a new process instance"", ""decide whether to reject or accept the customized bike order"", ""notify the storehouse and engineering department of the accepted order"", ""evaluate the part list for required quantities and availability"", ""reserve available in-house parts"", ""back-order unavailable parts"", ""prepare for the bicycle assembly"", ""assemble the bicycle once parts are secured and preparations are complete"", ""deliver the bicycle to the customer and conclude the process instance""]","[""receive an order and create a new process instance"", ""reject or accept the order for a customized bike"", ""inform the storehouse and engineering department about the accepted order"", ""process the part list and check the required quantity of each part"", ""reserve the part if available in-house"", ""back-order the part if not available"", ""prepare everything for the assembling of the ordered bicycle"", ""assemble the bicycle after all parts are reserved or back-ordered and preparation is finished"", ""ship the bicycle to the customer and finish the process instance""]","{""name"": ""ReceiveOrder"", ""description"": ""Sales department receives a new order specification from customer.It takes no input. It returns the part list and the product id."", ""input_parameters"": [], ""output_parameters"": [""part_list:list"", ""product_id:int""], ""actor"": ""crm_is""}
{""name"": ""AssembleBicycle"", ""description"": ""Assemble the bicycle.It takes the part list. It does not return anything."", ""input_parameters"": [""part_list:list""], ""output_parameters"": [], ""actor"": ""manufacturer""}
{""name"": ""InformStorehouseEngineering"", ""description"": ""Inform the storehouse and the engineering departments.It takes the part list and the product id. It does not return anything."", ""input_parameters"": [""part_list:list"", ""product_id:int""], ""output_parameters"": [], ""actor"": ""manufacturer""}
{""name"": ""SendRequirements"", ""description"": ""Send the requirements (part list) to the proper teams.It takes the list of requirements. It does not return anything."", ""input_parameters"": [""part_list:list""], ""output_parameters"": [], ""actor"": ""manufacturer""}
{""name"": ""OrderParts"", ""description"": ""Manufacturer orders the parts online.It takes the part list. It does not return anything."", ""input_parameters"": [""part_list:list""], ""output_parameters"": [], ""actor"": ""manufacturer""}
{""name"": ""DeliverProduct"", ""description"": ""Deliver the product to the customer.It takes the product id as input. It does not return anything."", ""input_parameters"": [""product_id:int""], ""output_parameters"": [], ""actor"": ""crm_is""}
","import threading

def process_order():
    part_list, product_id = ReceiveOrder.call()
    order_accepted = True  # Assuming the order is accepted for the sake of this example

    if not order_accepted:
        return ""Order Rejected""

    def process_part_list(part_list):
        for part in part_list:
            part_available = True  # Assuming part availability check logic
            if part_available:
                ReservePart.call(part=part)
            else:
                BackOrderPart.call(part=part)

    def prepare_for_assembling(part_list, product_id):
        InformStorehouseEngineering.call(part_list=part_list, product_id=product_id)

    # Parallel execution of storehouse processing and engineering preparation
    threads = []
    thread1 = threading.Thread(target=process_part_list, args=(part_list,))
    thread2 = threading.Thread(target=prepare_for_assembling, args=(part_list, product_id))
    threads.append(thread1)
    threads.append(thread2)
    for thread in threads:
        thread.start()
    for thread in threads:
        thread.join()

    AssembleBicycle.call(part_list=part_list)
    DeliverProduct.call(product_id=product_id)

    return ""Order Processed and Bicycle Delivered""

if __name__ == ""__main__"":
    result = process_order()
    print(result)"
