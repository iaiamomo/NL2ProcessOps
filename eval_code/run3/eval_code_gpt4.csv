process,input,model,tasks,tools,code
p01,"When a pallet arrives at the working station, the system empties the scan results. Then the worker scans the order. Afterwards the system displays the scanning UI to the worker and in parallel, the worker assembles the part.","graph LR
1:startevent:((startevent)) --> 2:task:(Empty scan results)
2:task: --> 3:task:(Scan order)
3:task: --> 4:parallelgateway:{AND}
4:parallelgateway:{AND} --> 5:task:(Display scanning UI)
4:parallelgateway:{AND} --> 6:task:(Assemble part)
5:task: --> 7:parallelgateway:{AND}
6:task: --> 7:parallelgateway:{AND}
7:parallelgateway:{AND} --> 8:endevent:((endevent))","[""empty the scan results when a pallet arrives"", ""scan the order"", ""display the scanning UI to the worker"", ""assemble the part in parallel with displaying the scanning UI""]","{""name"": ""EmptyScan"", ""description"": ""The working station system empty the scan result.It takes no input. It returns no output."", ""input_parameters"": [], ""output_parameters"": [], ""actor"": ""working_station_is""}
{""name"": ""ScanOrder"", ""description"": ""Worker scans the order.It takes no input. It returns the order id scanned."", ""input_parameters"": [], ""output_parameters"": [""order_id:int""], ""actor"": ""working_station_is""}
{""name"": ""DisplaysScanningUI"", ""description"": ""The working station system displays the scanning UI.It takes no input. It returns no output."", ""input_parameters"": [""order_id:int""], ""output_parameters"": [], ""actor"": ""working_station_is""}
","import threading

# Assuming the tools are already imported and available for use as described
# EmptyScan, ScanOrder, DisplaysScanningUI

def display_scanning_ui_and_assemble_part(order_id):
    # Display scanning UI
    DisplaysScanningUI.call(order_id=order_id)
    # Simulate assembling part in parallel (no specific tool/method provided for this, so it's just a placeholder)
    print(""Assembling part..."")

def process():
    # Empty scan results
    EmptyScan.call()
    
    # Scan order
    order_id = ScanOrder.call()
    
    # Create a thread for displaying scanning UI and assembling part in parallel
    thread = threading.Thread(target=display_scanning_ui_and_assemble_part, args=(order_id,))
    thread.start()
    
    # Wait for the thread to complete
    thread.join()
    
    return ""Process completed.""

if __name__ == ""__main__"":
    result = process()
    print(result)"
p02,"The calibration process of a cardboard production consists of continuously capturing a photo of the cardboard being produced. Each photo is analyzed to check if all the markers identified are ok. If markers are not ok, the calibration process continues. If the markers are ok, the speed of the die cutting machine is set to 10000 RPM and the process ends.","graph LR
1:startevent:((startevent)) --> 2:task:(Capture Photo)
2:task: --> 3:task:(Analyze Photo)
3:task: --> 4:exclusivegateway:{x}
4:exclusivegateway:{x} --> |Markers not OK| 2:task:
4:exclusivegateway:{x} --> |Markers OK| 5:task:(Set Speed to 10000 RPM)
5:task: --> 6:endevent:((endevent))","[""continuously capture a photo of the cardboard being produced"", ""analyze each photo to check if all markers are ok"", ""if markers are not ok, continue the calibration process"", ""if markers are ok, set the speed of the die cutting machine to 10000 RPM""]","{""name"": ""CaptureImage"", ""description"": ""Capture of a photo of the cardboard from the camera.This tool takes no input and returns an image captured from the the camera. The image is returned as a numpy matrix."", ""input_parameters"": [], ""output_parameters"": [""image:np.matrix""], ""actor"": ""camera""}
{""name"": ""StoreCardboardRoll"", ""description"": ""Worker stores the cardboard roll in the warehouse.It takes as input the location. It returns no output."", ""input_parameters"": [""location:str""], ""output_parameters"": [], ""actor"": ""worker""}
{""name"": ""CheckMarkers"", ""description"": ""Analysis of the markers on a cardboard image.This tool takes as input an image depicting a cardboard. It returns a boolean indicating if markers are present on the cardboard."", ""input_parameters"": [""image:np.matrix""], ""output_parameters"": [""markers_ok:bool""], ""actor"": ""vision_is""}
{""name"": ""SetSpeedDieMachine"", ""description"": ""set the speed of the die cutting machine.It takes as input the speed. It returns a boolean value, True if the speed has been set, False otherwise."", ""input_parameters"": [""speed:int""], ""output_parameters"": [""speed_set:bool""], ""actor"": ""die_machine""}
","import numpy as np

# Assuming the tools are already imported and available for use
# from tools import CaptureImage, CheckMarkers, SetSpeedDieMachine

def calibration_process():
    while True:
        # Capture a photo of the cardboard
        captured_image = CaptureImage.call()
        
        # Analyze the photo to check if all markers identified are ok
        markers_ok = CheckMarkers.call(image=captured_image)
        
        # If markers are not ok, the calibration process continues (loop)
        if not markers_ok:
            continue
        
        # If markers are ok, set the speed of the die cutting machine to 10000 RPM and end the process
        speed_set = SetSpeedDieMachine.call(speed=10000)
        if speed_set:
            print(""Speed set to 10000 RPM successfully."")
        else:
            print(""Failed to set speed to 10000 RPM."")
        break

if __name__ == ""__main__"":
    calibration_process()"
p03,"The manufacturing process of spindles in HSD company is fully automated. When a new order for a spindle arrives at the sales department, a new process instance is initiated. The warehouse system retrive the necessary raw materials, and in parallel the L12 line is set up for the assembly of the ordered spindle. Once the warehouse successfully retrieves the raw materials and the L12 line is set up, the spindle is assembled over the L12 line. Subsequently, the spindle undergoes testing and running-in in the smart tester. If the outcome of the test is negative, the spindle is sent to maintenance. Then, the the process ends.","graph LR
1:startevent:((startevent)) --> 2:task:(New order arrives)
2:task: --> 3:parallelgateway:{AND}
3:parallelgateway:{AND} --> 4:task:(Retrieve raw materials)
3:parallelgateway:{AND} --> 5:task:(Set up L12 line)
4:task: --> 6:parallelgateway:{AND}
5:task: --> 6:parallelgateway:{AND}
6:parallelgateway:{AND} --> 7:task:(Assemble spindle)
7:task: --> 8:task:(Test and run-in spindle)
8:task: --> 9:exclusivegateway:{x}
9:exclusivegateway:{x} --> |Test Negative| 10:task:(Send to maintenance)
9:exclusivegateway:{x} --> |Test Positive| 11:endevent:((endevent))
10:task: --> 11:endevent:((endevent))","[""receive a new order for a spindle"", ""retrieve the necessary raw materials from the warehouse"", ""set up the L12 line for spindle assembly"", ""assemble the spindle over the L12 line"", ""test and run-in the spindle in the smart tester"", ""if the test outcome is negative, send the spindle to maintenance""]","{""name"": ""L12AssembleSpindle"", ""description"": ""Assembly of a spindle over the L12 line.This tool takes as input the part list of a spindle. It returns a boolean indicating if the spindle has been assembled."", ""input_parameters"": {""part_list"": {""type"": ""list"", ""description"": ""list of parts of a spindle""}}, ""output_parameters"": {""assembled"": {""type"": ""bool"", ""description"": ""True if the spindle has been assembled, False otherwise""}}, ""actor"": ""l12""}
{""name"": ""RetrieveRawMaterials"", ""description"": ""Warehouse deparment evaluates part list and retrieve raw materials.This tool takes as input the part list of a product. It returns a boolean indicating if all the parts are retrieved."", ""input_parameters"": [""part_list:list""], ""output_parameters"": [""retrieved:bool""], ""actor"": ""wms_is""}
{""name"": ""OrderRawMaterial"", ""description"": ""Warehouse deparment orders the raw material.It takes the part as input. It does not return anything."", ""input_parameters"": [""part:str""], ""output_parameters"": [], ""actor"": ""wms_is""}
{""name"": ""RetrieveRawMaterial"", ""description"": ""Warehouse department retrieves a raw material.It takes the part as input. It returns a boolean indicating if the part is retrieved."", ""input_parameters"": [""part:str""], ""output_parameters"": [""retrieved:bool""], ""actor"": ""wms_is""}
{""name"": ""L12SetUp"", ""description"": ""Set up the L12 line for spindle assembly.This tool takes no input and returns a boolean indicating if the line has been set up."", ""input_parameters"": [], ""output_parameters"": [""set_up:bool""], ""actor"": ""l12""}
{""name"": ""TestSpindle"", ""description"": ""Test and run-in of the spindle.It takes as input the identificator of the product to be tested. It returns a boolean value, True if the spindle passed the test, False otherwise."", ""input_parameters"": [""product_id:int""], ""output_parameters"": [""passed:bool""], ""actor"": ""smart_tester""}
","import threading

# Assuming the tools are already imported and available for use as described
def process(part_list, product_id):
    # Step 1: Retrieve raw materials and set up L12 line in parallel
    def retrieve_raw_materials():
        return RetrieveRawMaterials.call(part_list=part_list)

    def setup_l12_line():
        return L12SetUp.call()

    thread_retrieve = threading.Thread(target=retrieve_raw_materials)
    thread_setup = threading.Thread(target=setup_l12_line)

    thread_retrieve.start()
    thread_setup.start()

    thread_retrieve.join()
    thread_setup.join()

    raw_materials_retrieved = thread_retrieve.result()
    l12_line_setup = thread_setup.result()

    # Step 2: Assemble spindle if raw materials are retrieved and L12 line is set up
    if raw_materials_retrieved and l12_line_setup:
        assembly_result = L12AssembleSpindle.call(part_list=part_list)

        # Step 3: Test and run-in spindle
        if assembly_result:
            test_result = TestSpindle.call(product_id=product_id)

            # Step 4: Send to maintenance if test is negative
            if not test_result:
                # Assuming maintenance does not require a specific tool and is just a process step
                print(""Spindle sent to maintenance."")
            else:
                print(""Spindle assembly and testing completed successfully."")
        else:
            print(""Assembly failed."")
    else:
        print(""Failed to retrieve raw materials or set up L12 line."")

if __name__ == ""__main__"":
    part_list = [""part1"", ""part2"", ""part3""]  # Example part list
    product_id = 123  # Example product ID
    process(part_list, product_id)"
p04,"When craving a custom 3D model, as a first step you have to instruct an artist to create a project for you. First you have to send him several sketches, and then tell him what to change until you are satisfied with the result. After that, you choose a plastic color you want to use for 3D printing. If you have the color at home (in stock), you check how much color you have left. If it's under 100 grams, you put it on your shopping list. If you do not have the color at home, you order it. When you have the plastic, you can turn the printer on and heat up the bed and the extruder (it continuously sends you back its status). While doing that, you can generate the gcode file for your printer out of the STL sent to you by the artist. After that you print the model.","graph LR
1:startevent:((startevent)) --> 2:task:(Instruct Artist)
2:task: --> 3:task:(Send Sketches)
3:task: --> 4:task:(Revise Project)
4:task: --> 5:task:(Choose Plastic Color)
5:task: --> 6:exclusivegateway:{x}
6:exclusivegateway:{x} --> |Color In Stock| 7:task:(Check Color Quantity)
7:task: --> 8:exclusivegateway:{x}
8:exclusivegateway:{x} --> |Under 100g| 9:task:(Add to Shopping List)
8:exclusivegateway:{x} --> |Enough Stock| 11:task:(Turn on Printer)
6:exclusivegateway:{x} --> |Color Not In Stock| 10:task:(Order Color)
10:task: --> 11:task:(Turn on Printer)
9:task: --> 11:task:
11:task: --> 12:task:(Heat up Printer)
12:task: --> 13:task:(Generate Gcode)
13:task: --> 14:task:(Print Model)
14:task: --> 15:endevent:((endevent))","[""instruct an artist to create a 3D model project"", ""send initial sketches to the artist"", ""revise the project until satisfied"", ""choose the plastic color for 3D printing"", ""check the quantity of the chosen color if in stock"", ""add the color to the shopping list if under 100 grams"", ""order the color if not in stock"", ""turn on the 3D printer and heat up the bed and extruder"", ""generate the Gcode file from the STL file"", ""print the 3D model""]","{""name"": ""SendSketches"", ""description"": ""Send the sketches of the project to the artist.It takes no input. It returns the description of the project."", ""input_parameters"": [], ""output_parameters"": [""project:str""], ""actor"": ""manufacturer""}
{""name"": ""RefineRequirementsTreeHouse"", ""description"": ""Refine the requirements for the tree house.It takes the part list. It returns the refined part list."", ""input_parameters"": [""part_list:list""], ""output_parameters"": [""refined_part_list:list""], ""actor"": ""manufacturer""}
{""name"": ""ChoosePlasticColor"", ""description"": ""Choose the color of the plastic.It takes no input. It returns the color of the plastic."", ""input_parameters"": [], ""output_parameters"": [""color:int""], ""actor"": ""manufacturer""}
{""name"": ""CheckColorQuantity"", ""description"": ""Check the quantity of the color.It takes the color as input. It returns the quantity of the color in grams."", ""input_parameters"": [""color:int""], ""output_parameters"": [""quantity:int""], ""actor"": ""manufacturer""}
{""name"": ""CheckColorAvailability"", ""description"": ""Check the availability of the color.It takes the color as input. It returns the availability of the color."", ""input_parameters"": [""color:int""], ""output_parameters"": [""availability:bool""], ""actor"": ""manufacturer""}
{""name"": ""OrderColor"", ""description"": ""Order the color.It takes the color as input. It does not return anything."", ""input_parameters"": [""color:int""], ""output_parameters"": [], ""actor"": ""manufacturer""}
{""name"": ""HeatUpBedExtruder"", ""description"": ""Heat up the bed and the extruder.It takes no input. It does not return anything."", ""input_parameters"": [], ""output_parameters"": [], ""actor"": ""printer_3d""}
{""name"": ""TurnOn"", ""description"": ""Turn on the 3D printer.It takes no input. It does not return anything."", ""input_parameters"": [], ""output_parameters"": [], ""actor"": ""printer_3d""}
{""name"": ""GenerateGCode"", ""description"": ""Generate the GCode file for the printer.It takes the object as input. It returns the GCode file."", ""input_parameters"": [""project:str""], ""output_parameters"": [""gcode:str""], ""actor"": ""manufacturer""}
{""name"": ""Print"", ""description"": ""Print the object.It takes the object as input. It does not return anything."", ""input_parameters"": [""GCodeFile:str""], ""output_parameters"": [], ""actor"": ""printer_3d""}
","from threading import Thread

# Assuming all the tools are already imported as per the guidelines

def process():
    # Instruct the artist and send sketches
    project_description = SendSketches.call()
    
    # Revise the project until satisfied (not explicitly modeled, so we skip the implementation details)
    
    # Choose the plastic color
    color = ChoosePlasticColor.call()
    
    # Check color availability
    color_availability = CheckColorAvailability.call(color=color)
    
    if color_availability:
        # Check color quantity
        quantity = CheckColorQuantity.call(color=color)
        if quantity < 100:
            # Add to shopping list if under 100g
            # Assuming there's a function or method to add items to a shopping list
            add_to_shopping_list(color)
        # If enough stock or after adding to shopping list, proceed to turn on the printer
    else:
        # Order color if not in stock
        OrderColor.call(color=color)
    
    # Turn on the printer
    TurnOn.call()
    
    # Heat up the bed and the extruder in parallel with generating the GCode
    heat_up_thread = Thread(target=HeatUpBedExtruder.call)
    generate_gcode_thread = Thread(target=GenerateGCode.call, args=(project_description,))
    
    heat_up_thread.start()
    generate_gcode_thread.start()
    
    heat_up_thread.join()
    generate_gcode_thread.join()
    
    # Assuming GenerateGCode.call() returns a value that we capture
    gcode = GenerateGCode.call(project=project_description)
    
    # Print the model
    Print.call(GCodeFile=gcode)

def add_to_shopping_list(item):
    # Placeholder function to simulate adding items to a shopping list
    print(f""Adding {item} to the shopping list."")

if __name__ == ""__main__"":
    process()"
p05,"Plastic injection molding is a manufacturing process for producing a variety of parts by injecting molten plastic material into a mold, and letting it cool and solidify into the desired end product. Our interest is in the quality assurance process which involves real-time monitoring of injection molding parameters. As each batch of molten plastic enters the mold, sensors capture data on temperature, pressure, and fill rates. The system analyzes this data to ensure that the molding parameters align with the specified standards. If any deviations are detected, the system triggers adjustments to the injection molding machine settings, allowing for immediate correction. Once the parameters are within the acceptable range, the system authorizes the production run to continue. This dynamic monitoring process guarantees the consistency and quality of the plastic molded components, minimizing the risk of defects and ensuring adherence to precise manufacturing specifications.","graph LR
1:startevent:((startevent)) --> 2:task:(Capture Data)
2:task: --> 3:task:(Analyze Data)
3:task: --> 4:exclusivegateway:{x}
4:exclusivegateway:{x} --> |Deviations Detected| 5:task:(Adjust Machine Settings)
5:task: --> 3:task:
4:exclusivegateway:{x} --> |Parameters Acceptable| 6:task:(Authorize Production)
6:task: --> 7:endevent:((endevent))","[""capture data on temperature, pressure, and fill rates"", ""analyze the captured data to ensure alignment with standards"", ""adjust the injection molding machine settings if deviations are detected"", ""authorize the production run to continue once parameters are within the acceptable range""]","{""name"": ""SensorMeasure"", ""description"": ""Measure the temperature, pressure and fill rates of the mold.It takes no input and returns the temperature of the oven."", ""input_parameters"": [], ""output_parameters"": [""temperature:int"", ""pressure:int"", ""fill_rate:int""], ""actor"": ""mold_is""}
{""name"": ""AnalyzeMold"", ""description"": ""Analyze the temperature, pressure and fill rates of the mold to check deviations.It takes the temperature, pressure and fill rate as input and returns a boolean indicating if the mold is ok."", ""input_parameters"": [""temperature:int"", ""pressure:int"", ""fill_rate:int""], ""output_parameters"": [""deviation:bool""], ""actor"": ""mold_is""}
{""name"": ""AdjustMold"", ""description"": ""Adjust the settings the mold.It takes no input and returns no output."", ""input_parameters"": [], ""output_parameters"": [], ""actor"": ""mold_is""}
{""name"": ""AuthorizeProduction"", ""description"": ""Authorize the production of the mold.It takes no input and returns no output."", ""input_parameters"": [], ""output_parameters"": [], ""actor"": ""mold_is""}
","def plastic_injection_molding_process():
    while True:
        # Capture data from sensors
        temperature, pressure, fill_rate = SensorMeasure.call()
        
        # Analyze captured data for deviations
        deviation_detected = AnalyzeMold.call(temperature=temperature, pressure=pressure, fill_rate=fill_rate)
        
        if deviation_detected:
            # Adjust machine settings if deviations are detected
            AdjustMold.call()
        else:
            # Authorize production if parameters are acceptable
            AuthorizeProduction.call()
            break  # Exit the loop once production is authorized

if __name__ == ""__main__"":
    plastic_injection_molding_process()"
p06,"The production of custom metal brackets begins with order processing. The warehouse department evaluates the parts lists and in parallel the production planning department configures the robotic assembly line accordingly. The automated precision machine cuts the metal and the welding machine assembles the parts into brackets. A computer vision inspection system then checks for quality assurance. If defective brakets are detected, the process ends. After inspection, a coating system enhances durability. Finally, the process is complete.","graph LR
1:startevent:((startevent)) --> 2:task:(Process Order)
2:task: --> 3:parallelgateway:{AND}
3:parallelgateway:{AND} --> 4:task:(Evaluate Parts List)
3:parallelgateway:{AND} --> 5:task:(Configure Robotic Assembly Line)
4:task: --> 6:parallelgateway:{AND}
5:task: --> 6:parallelgateway:{AND}
6:parallelgateway:{AND} --> 7:task:(Cut Metal)
7:task: --> 8:task:(Assemble Brackets)
8:task: --> 9:task:(Inspect Brackets)
9:task: --> 10:exclusivegateway:{x}
10:exclusivegateway:{x} --> |Defective| 11:endevent:((endevent))
10:exclusivegateway:{x} --> |Not Defective| 12:task:(Coat Brackets)
12:task: --> 13:endevent:((endevent))","[""process the order"", ""evaluate the parts list"", ""configure the robotic assembly line"", ""cut the metal with precision machinery"", ""assemble the parts into brackets"", ""inspect the brackets with a computer vision system"", ""if defective brackets are detected, end the process"", ""apply a coating to enhance durability""]","{""name"": ""AcceptOrder"", ""description"": ""Sales department accepts the order.It takes the product id as input. It returns a boolean indicating if the order is accepted."", ""input_parameters"": [""product_id:int""], ""output_parameters"": [""order_accepted:bool""], ""actor"": ""crm_is""}
{""name"": ""OrderParts"", ""description"": ""Manufacturer orders the parts online.It takes the part list. It does not return anything."", ""input_parameters"": [""part_list:list""], ""output_parameters"": [], ""actor"": ""manufacturer""}
{""name"": ""ConfigureAssemblyLine"", ""description"": ""Configure the assembly line.This tool takes no input and does not return anything."", ""input_parameters"": [], ""output_parameters"": [], ""actor"": ""assembly_line""}
{""name"": ""CutMetal"", ""description"": ""The precision machine cut the metal.This tool takes no input and does not return anything."", ""input_parameters"": [], ""output_parameters"": [], ""actor"": ""precision_machine""}
{""name"": ""AssembleParts"", ""description"": ""The welding machine assemble the parts into brackets.This tool takes no input and does not return anything."", ""input_parameters"": [], ""output_parameters"": [], ""actor"": ""welding_machine""}
{""name"": ""AssembleParts"", ""description"": ""Worker assembles parts.It takes no input. It returns no output."", ""input_parameters"": [], ""output_parameters"": [], ""actor"": ""worker""}
{""name"": ""AssembleBicycle"", ""description"": ""Assemble the bicycle.It takes the part list. It does not return anything."", ""input_parameters"": [""part_list:list""], ""output_parameters"": [], ""actor"": ""manufacturer""}
{""name"": ""CheckQualityBrackets"", ""description"": ""Check the quality of the brackets.It takes no input. It returns a boolean indicating if the brackets are of good quality."", ""input_parameters"": [], ""output_parameters"": [""quality_ok:bool""], ""actor"": ""vision_is""}
{""name"": ""EnhanceProduct"", ""description"": ""The coating machine enhances the product.This tool takes no input and does not return anything."", ""input_parameters"": [], ""output_parameters"": [], ""actor"": ""coating_machine""}
","import threading

# Assuming the tools are already imported as per the guidelines
# from tools import AcceptOrder, OrderParts, ConfigureAssemblyLine, CutMetal, AssembleParts, CheckQualityBrackets, EnhanceProduct

def process_order(product_id, part_list):
    # Accept the order
    order_accepted = AcceptOrder.call(product_id=product_id)
    if not order_accepted:
        return False

    # Parallel execution for evaluating parts list and configuring the robotic assembly line
    def evaluate_parts_list():
        OrderParts.call(part_list=part_list)

    def configure_assembly_line():
        ConfigureAssemblyLine.call()

    thread_list = []
    thread_list.append(threading.Thread(target=evaluate_parts_list))
    thread_list.append(threading.Thread(target=configure_assembly_line))

    for thread in thread_list:
        thread.start()

    for thread in thread_list:
        thread.join()

    # Sequential tasks for cutting metal, assembling brackets, and inspecting brackets
    CutMetal.call()
    AssembleParts.call()
    quality_ok = CheckQualityBrackets.call()

    if not quality_ok:
        return False

    # Coating the brackets if they pass the quality inspection
    EnhanceProduct.call()

    return True

if __name__ == ""__main__"":
    product_id = 123  # Example product ID
    part_list = ['part1', 'part2', 'part3']  # Example parts list
    process_completed = process_order(product_id, part_list)
    if process_completed:
        print(""Process completed successfully."")
    else:
        print(""Process terminated due to an error or quality check failure."")"
p07,"You produce airplanes. While the base model is always the same, your customer likes to pimp their airplane with fancy interior. You let them decide between a number of 5 different bars, the number of seats, their color, and the amount of water in the toilets of their plane (you can come up with additional stuff). After you received the specifications you send the requirements to different teams to manufacture the parts. E.g. manufacturing the vodka bar is done by the Russian team, the whiskey bar is manufactured by an Irish team. After receiving the individual bits and pieces, the interior of the plane is assembled, and the plane is sent on a test flight. During the flight you create a test protocol which is sent to you and the customer. The plane is delivered to the customer, which has to confirm.","graph LR
1:startevent:((startevent)) --> 2:task:(Receive airplane customization specifications)
2:task: --> 3:parallelgateway:{AND}
3:parallelgateway:{AND} --> 4:task:(Manufacture vodka bar)
3:parallelgateway:{AND} --> 5:task:(Manufacture whiskey bar)
3:parallelgateway:{AND} --> 6:task:(Manufacture seats)
3:parallelgateway:{AND} --> 7:task:(Manufacture additional custom parts)
4:task: --> 8:parallelgateway:{AND}
5:task: --> 8:parallelgateway:{AND}
6:task: --> 8:parallelgateway:{AND}
7:task: --> 8:parallelgateway:{AND}
8:parallelgateway:{AND} --> 9:task:(Assemble interior)
9:task: --> 10:task:(Test flight and create protocol)
10:task: --> 11:task:(Deliver plane to customer)
11:task: --> 12:task:(Customer confirmation)
12:task: --> 13:endevent:((endevent))","[""receive customization specifications from the customer"", ""manufacture vodka bar by the Russian team"", ""manufacture whiskey bar by the Irish team"", ""manufacture the specified number and color of seats"", ""manufacture additional custom parts as specified by the customer"", ""assemble the interior of the airplane"", ""conduct a test flight and create a test protocol"", ""deliver the airplane to the customer"", ""obtain confirmation from the customer""]","{""name"": ""ReceiveOrder"", ""description"": ""Sales department receives a new order specification from customer.It takes no input. It returns the part list and the product id."", ""input_parameters"": [], ""output_parameters"": [""part_list:list"", ""product_id:int""], ""actor"": ""crm_is""}
{""name"": ""BuySnacks"", ""description"": ""Buy snacks for the party.It takes the list of people. It does not return anything."", ""input_parameters"": [""people:list""], ""output_parameters"": [], ""actor"": ""manufacturer""}
{""name"": ""InformStorehouseEngineering"", ""description"": ""Inform the storehouse and the engineering departments.It takes the part list and the product id. It does not return anything."", ""input_parameters"": [""part_list:list"", ""product_id:int""], ""output_parameters"": [], ""actor"": ""manufacturer""}
{""name"": ""AssembleInterior"", ""description"": ""Assemble the interior of the plane.It takes the part list and the plane id. It does not return anything."", ""input_parameters"": [""part_list:list"", ""product_id:int""], ""output_parameters"": [], ""actor"": ""manufacturer""}
{""name"": ""OrderParts"", ""description"": ""Manufacturer orders the parts online.It takes the part list. It does not return anything."", ""input_parameters"": [""part_list:list""], ""output_parameters"": [], ""actor"": ""manufacturer""}
{""name"": ""CreateTestProtocol"", ""description"": ""Create the test protocol for the product.It takes the part list and the product id. It returns the test protocol."", ""input_parameters"": [""part_list:list"", ""product_id:int""], ""output_parameters"": [""test_protocol:str""], ""actor"": ""manufacturer""}
{""name"": ""AcceptOrder"", ""description"": ""Sales department accepts the order.It takes the product id as input. It returns a boolean indicating if the order is accepted."", ""input_parameters"": [""product_id:int""], ""output_parameters"": [""order_accepted:bool""], ""actor"": ""crm_is""}
","import threading
from queue import Queue

# Assuming the tools are already imported and available for use

def manufacture_parts(part_list, product_id):
    # Inform storehouse and engineering departments about the parts and product id
    InformStorehouseEngineering.call(part_list=part_list, product_id=product_id)
    # Order parts online based on the part list
    OrderParts.call(part_list=part_list)

def assemble_and_test(product_id, part_list):
    # Assemble the interior of the plane
    AssembleInterior.call(part_list=part_list, product_id=product_id)
    # Create the test protocol
    test_protocol = CreateTestProtocol.call(part_list=part_list, product_id=product_id)
    return test_protocol

def process():
    # Receive airplane customization specifications
    part_list, product_id = ReceiveOrder.call()

    # Manufacture parts in parallel
    threads = []
    q = Queue()

    def worker():
        while not q.empty():
            item = q.get()
            if item:
                manufacture_parts(part_list, product_id)
                q.task_done()

    for _ in range(4):  # Assuming there are 4 different parts to manufacture
        q.put(True)
    for _ in range(4):
        thread = threading.Thread(target=worker)
        threads.append(thread)
        thread.start()

    for thread in threads:
        thread.join()

    # Assemble interior and test
    test_protocol = assemble_and_test(product_id, part_list)

    # Deliver plane to customer and wait for confirmation
    order_accepted = AcceptOrder.call(product_id=product_id)
    if order_accepted:
        print(f""Plane with product ID {product_id} delivered successfully."")
        print(f""Test Protocol: {test_protocol}"")
    else:
        print(f""Delivery of plane with product ID {product_id} failed."")

if __name__ == ""__main__"":
    process()"
p08,"The warehouse of Grimaldi is a warehouse that stores cardboard rolls. A cardboard roll is used to produce cardboards. There exists two types of cardboard: the white cardboard and the brown cardboard. The warehouse stores the cardboard rolls depending on the type of cardboard. When a new cardboard roll arrives at the warehouse, the worker checks the type of cardboard and enter this information inside the WMS system. The system automatically capture an image of the current status of the warehouse. By analyzing the image, the system identifies the location where the cardboard roll should be stored. Then the worker stores the cardboard rool in the identified location in the warehouse and the system updates the stock of that cardboard rolls in the warehouse.","graph LR
1:startevent:((startevent)) --> 2:task:(New Cardboard Roll Arrives)
2:task: --> 3:task:(Check Cardboard Type)
3:task: --> 4:task:(Enter Information in WMS)
4:task: --> 5:task:(Capture Image of Warehouse)
5:task: --> 6:task:(Identify Storage Location)
6:task: --> 7:task:(Store Cardboard Roll)
7:task: --> 8:task:(Update Stock in System)
8:task: --> 9:endevent:((endevent))","[""receive a new cardboard roll at the warehouse"", ""check the type of the cardboard roll"", ""enter the cardboard type information into the WMS system"", ""capture an image of the current warehouse status"", ""identify the appropriate storage location for the new roll"", ""store the cardboard roll in the identified location"", ""update the stock of cardboard rolls in the warehouse""]","{""name"": ""StoreCardboardRoll"", ""description"": ""Worker stores the cardboard roll in the warehouse.It takes as input the location. It returns no output."", ""input_parameters"": [""location:str""], ""output_parameters"": [], ""actor"": ""worker""}
{""name"": ""AnalyzeWarehouse"", ""description"": ""Identify where to store a new cardboard roll.It takes as input an image of the warehouse and the type of cardboard roll. It returns the location where to store the new product."", ""input_parameters"": [""image:np.matrix"", ""type_cardboard:str""], ""output_parameters"": [""location:str""], ""actor"": ""vision_is""}
{""name"": ""CheckTypeCardboard"", ""description"": ""Worker checks the type of cardboard.It takes no input. It returns no output."", ""input_parameters"": [], ""output_parameters"": [""type_cardboard:str""], ""actor"": ""worker""}
{""name"": ""InsertCardboardTypeInfo"", ""description"": ""Worker inserts the type of cardboard in the system.It takes the type of cardboard as input. It returns no output."", ""input_parameters"": [""type_cardboard:str""], ""output_parameters"": [], ""actor"": ""worker""}
{""name"": ""UpdateStock"", ""description"": ""Warehouse department updates the stock of a product.It takes as input the product type. It does not return anything."", ""input_parameters"": [""product_type:str""], ""output_parameters"": [], ""actor"": ""wms_is""}
","import numpy as np

# Assuming the necessary tool classes are imported as per the guidelines
# StoreCardboardRoll, AnalyzeWarehouse, CheckTypeCardboard, InsertCardboardTypeInfo, UpdateStock

def process_new_cardboard_roll(image_of_warehouse: np.matrix):
    # Worker checks the type of cardboard
    type_cardboard = CheckTypeCardboard.call()
    
    # Worker inserts the type of cardboard in the system
    InsertCardboardTypeInfo.call(type_cardboard=type_cardboard)
    
    # Identify where to store a new cardboard roll
    location = AnalyzeWarehouse.call(image=image_of_warehouse, type_cardboard=type_cardboard)
    
    # Worker stores the cardboard roll in the warehouse
    StoreCardboardRoll.call(location=location)
    
    # Warehouse department updates the stock of a product
    UpdateStock.call(product_type=type_cardboard)
    
    print(f""Cardboard roll of type {type_cardboard} stored successfully at location {location}."")

if __name__ == ""__main__"":
    # Example usage
    # Assuming an image of the warehouse is available as a numpy matrix
    example_warehouse_image = np.matrix([[0, 0, 1], [1, 0, 0], [0, 1, 0]])
    process_new_cardboard_roll(example_warehouse_image)"
p09,"You want to build a tree house. First you collect your requirements, and send them to a tree house architect. The architect sends you back a draft, which you refine multiple times with additional requirements. You then create the list of needed materials from the plan. These materials fall into several categories, you order them from several online stores. While the order is processed, you send messages to several of your friends to build the house. After the house is built, you send invitations for a tree house party to your friends. In order to buy the snacks for the party, a list of people that attend the party is created.","graph LR
1:startevent:((startevent)) --> 2:task:(Collect Requirements)
2:task: --> 3:task:(Send Requirements to Architect)
3:task: --> 4:task:(Receive Draft from Architect)
4:task: --> 5:exclusivegateway:{x}
5:exclusivegateway:{x} --> |Additional Requirements| 6:task:(Refine Draft)
6:task: --> 4:task:
5:exclusivegateway:{x} --> |No Additional Requirements| 7:task:(Create List of Materials)
7:task: --> 8:parallelgateway:{AND}
8:parallelgateway:{AND} --> 9:task:(Order Materials Online)
8:parallelgateway:{AND} --> 10:task:(Message Friends to Help Build)
9:task: --> 11:parallelgateway:{AND}
10:task: --> 11:parallelgateway:{AND}
11:parallelgateway:{AND} --> 12:task:(Build Tree House)
12:task: --> 13:task:(Send Invitations for Tree House Party)
13:task: --> 14:task:(Create Attendee List)
14:task: --> 15:endevent:((endevent))","[""collect your requirements for the tree house"", ""send requirements to a tree house architect"", ""receive draft plan from architect"", ""refine the draft with additional requirements as needed"", ""create a list of needed materials from the final plan"", ""order materials from several online stores"", ""message friends to help build the tree house"", ""build the tree house"", ""send invitations for a tree house party"", ""create a list of people attending the party for buying snacks""]","{""name"": ""RefineRequirementsTreeHouse"", ""description"": ""Refine the requirements for the tree house.It takes the part list. It returns the refined part list."", ""input_parameters"": [""part_list:list""], ""output_parameters"": [""refined_part_list:list""], ""actor"": ""manufacturer""}
{""name"": ""GenerateRequirementTreeHouse"", ""description"": ""Generate the requirement for the tree house.It takes no input. It returns the part list."", ""input_parameters"": [], ""output_parameters"": [""part_list:list""], ""actor"": ""manufacturer""}
{""name"": ""AssembleTreeHouse"", ""description"": ""Assemble the tree house.It takes the part list. It does not return anything."", ""input_parameters"": [""part_list:list""], ""output_parameters"": [], ""actor"": ""manufacturer""}
{""name"": ""SendRequirementsArchitect"", ""description"": ""Send the requirements to the architect.It takes the part list. It does not return anything."", ""input_parameters"": [""part_list:list""], ""output_parameters"": [], ""actor"": ""manufacturer""}
{""name"": ""SendRequirements"", ""description"": ""Send the requirements (part list) to the proper teams.It takes the list of requirements. It does not return anything."", ""input_parameters"": [""part_list:list""], ""output_parameters"": [], ""actor"": ""manufacturer""}
{""name"": ""OrderParts"", ""description"": ""Manufacturer orders the parts online.It takes the part list. It does not return anything."", ""input_parameters"": [""part_list:list""], ""output_parameters"": [], ""actor"": ""manufacturer""}
{""name"": ""SendInvitations"", ""description"": ""Send the invitations to the people.It takes the list of people. It does not return anything."", ""input_parameters"": [""people:list""], ""output_parameters"": [], ""actor"": ""manufacturer""}
{""name"": ""BuySnacks"", ""description"": ""Buy snacks for the party.It takes the list of people. It does not return anything."", ""input_parameters"": [""people:list""], ""output_parameters"": [], ""actor"": ""manufacturer""}
","import threading

def process():
    # Collect Requirements
    part_list = GenerateRequirementTreeHouse.call()

    # Send Requirements to Architect and Receive Draft from Architect
    SendRequirementsArchitect.call(part_list=part_list)

    # Refine Draft with Additional Requirements
    while True:
        refined_part_list = RefineRequirementsTreeHouse.call(part_list=part_list)
        if refined_part_list == part_list:
            break
        else:
            part_list = refined_part_list

    # Create List of Materials
    # Assuming this step is integrated within the refinement or generation process
    # and the final part_list is used for ordering materials

    # Order Materials Online and Message Friends to Help Build (Parallel Execution)
    def order_materials():
        OrderParts.call(part_list=part_list)

    def message_friends():
        SendRequirements.call(part_list=part_list)

    order_thread = threading.Thread(target=order_materials)
    message_thread = threading.Thread(target=message_friends)

    order_thread.start()
    message_thread.start()

    order_thread.join()
    message_thread.join()

    # Build Tree House
    AssembleTreeHouse.call(part_list=part_list)

    # Send Invitations for Tree House Party
    # Assuming we have a predefined list of friends as attendees
    friends_list = [""Alice"", ""Bob"", ""Charlie""]
    SendInvitations.call(people=friends_list)

    # Create Attendee List and Buy Snacks
    # Assuming the attendee list is the same as the friends list
    BuySnacks.call(people=friends_list)

if __name__ == ""__main__"":
    process()"
p10,"A small company manufactures customized bicycles. Whenever the sales department receives an order, a new process instance is created. A member of the sales department can then reject or accept the order for a customized bike. In the former case, the process instance is finished. In the latter case, the storehouse and the engineering department are informed. The storehouse immediately processes the part list of the order and checks the required quantity of each part. If the part is available in-house, it is reserved. If it is not available, it is back-ordered. This procedure is repeated for each item on the part list. In the meantime, the engineering department prepares everything for the assembling of the ordered bicycle. If the storehouse has successfully reserved or back-ordered every item of the part list and the preparation activity has finished, the engineering department assembles the bicycle. Afterwards, the sales department ships the bicycle to the customer and finishes the process instance.","graph LR
1:startevent:((startevent)) --> 2:task:(Receive Order)
2:task: --> 3:exclusivegateway:{x}
3:exclusivegateway:{x} --> |Order Rejected| 4:endevent:((endevent))
3:exclusivegateway:{x} --> |Order Accepted| 5:parallelgateway:{AND}
5:parallelgateway:{AND} --> 6:task:(Process Part List)
5:parallelgateway:{AND} --> 7:task:(Prepare for Assembling)
6:task: --> 8:exclusivegateway:{x}
8:exclusivegateway:{x} --> |Part Available| 9:task:(Reserve Part)
8:exclusivegateway:{x} --> |Part Not Available| 10:task:(Back-Order Part)
9:task: --> 11:exclusivegateway:{x}
10:task: --> 11:exclusivegateway:{x}
11:exclusivegateway:{x} --> |More Parts| 6:task:
11:exclusivegateway:{x} --> |No More Parts| 12:parallelgateway:{AND}
7:task: --> 12:parallelgateway:{AND}
12:parallelgateway:{AND} --> 13:task:(Assemble Bicycle)
13:task: --> 14:task:(Ship Bicycle)
14:task: --> 15:endevent:((endevent))","[""receive an order and create a new process instance"", ""reject or accept the order"", ""inform the storehouse and engineering department if the order is accepted"", ""process the part list and check the required quantity of each part"", ""reserve the part if available in-house"", ""back-order the part if it is not available"", ""prepare everything for the assembling of the ordered bicycle"", ""assemble the bicycle after all parts are reserved or back-ordered and preparation is finished"", ""ship the bicycle to the customer and finish the process instance""]","{""name"": ""ReceiveOrder"", ""description"": ""Sales department receives a new order specification from customer.It takes no input. It returns the part list and the product id."", ""input_parameters"": [], ""output_parameters"": [""part_list:list"", ""product_id:int""], ""actor"": ""crm_is""}
{""name"": ""AcceptOrder"", ""description"": ""Sales department accepts the order.It takes the product id as input. It returns a boolean indicating if the order is accepted."", ""input_parameters"": [""product_id:int""], ""output_parameters"": [""order_accepted:bool""], ""actor"": ""crm_is""}
{""name"": ""InformStorehouseEngineering"", ""description"": ""Inform the storehouse and the engineering departments.It takes the part list and the product id. It does not return anything."", ""input_parameters"": [""part_list:list"", ""product_id:int""], ""output_parameters"": [], ""actor"": ""manufacturer""}
{""name"": ""SendRequirements"", ""description"": ""Send the requirements (part list) to the proper teams.It takes the list of requirements. It does not return anything."", ""input_parameters"": [""part_list:list""], ""output_parameters"": [], ""actor"": ""manufacturer""}
{""name"": ""OrderParts"", ""description"": ""Manufacturer orders the parts online.It takes the part list. It does not return anything."", ""input_parameters"": [""part_list:list""], ""output_parameters"": [], ""actor"": ""manufacturer""}
{""name"": ""AssembleBicycle"", ""description"": ""Assemble the bicycle.It takes the part list. It does not return anything."", ""input_parameters"": [""part_list:list""], ""output_parameters"": [], ""actor"": ""manufacturer""}
","import threading

def process_part_list(part_list):
    for part in part_list:
        # Simulate checking if part is available and either reserving or back-ordering it
        # This is a simplification, in a real scenario, we would call a service or a database to check part availability
        part_available = True  # Assume part is available for demonstration purposes
        if part_available:
            print(f""Reserving part: {part}"")
            # ReservePart.call(part)  # Example of how you would call the tool, assuming it exists
        else:
            print(f""Back-ordering part: {part}"")
            # BackOrderPart.call(part)  # Example of how you would call the tool, assuming it exists

def prepare_for_assembling():
    print(""Preparing for assembling..."")

def process_order():
    part_list, product_id = ReceiveOrder.call()
    order_accepted = AcceptOrder.call(product_id=product_id)
    if not order_accepted:
        print(""Order rejected."")
        return

    # Inform storehouse and engineering department
    InformStorehouseEngineering.call(part_list=part_list, product_id=product_id)

    # Parallel execution of processing part list and preparing for assembling
    part_list_thread = threading.Thread(target=process_part_list, args=(part_list,))
    prepare_thread = threading.Thread(target=prepare_for_assembling)

    part_list_thread.start()
    prepare_thread.start()

    part_list_thread.join()
    prepare_thread.join()

    # Assemble the bicycle
    AssembleBicycle.call(part_list=part_list)
    print(""Bicycle assembled."")

    # Ship the bicycle
    print(""Bicycle shipped to the customer."")

if __name__ == ""__main__"":
    process_order()"
