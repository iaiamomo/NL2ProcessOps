process,input,model,tasks,tasks_original,tools,code
p01,"When a pallet arrives at the working station, the system empties the scan results. Then the worker scans the order. Afterwards the system displays the scanning UI to the worker and in parallel, the worker assembles the part.","graph LR
1:startevent:((startevent)) --> 2:task:(Empty scan results)
2:task: --> 3:task:(Scan order)
3:task: --> 4:parallelgateway:{AND}
4:parallelgateway:{AND} --> 5:task:(Display scanning UI)
4:parallelgateway:{AND} --> 6:task:(Assemble part)
5:task: --> 7:parallelgateway:{AND}
6:task: --> 7:parallelgateway:{AND}
7:parallelgateway:{AND} --> 8:endevent:((endevent))","[""empty the scan results upon pallet arrival"", ""worker scans the order"", ""system displays the scanning UI to the worker"", ""worker assembles the part while scanning UI is displayed""]","[""empty the scan results when a pallet arrives"", ""scan the order"", ""display the scanning UI to the worker"", ""assemble the part in parallel with displaying the scanning UI""]","{""name"": ""EmptyScan"", ""description"": ""The working station system empty the scan result.It takes no input. It returns no output."", ""input_parameters"": [], ""output_parameters"": [], ""actor"": ""working_station_is""}
{""name"": ""ScanOrder"", ""description"": ""Worker scans the order.It takes no input. It returns the order id scanned."", ""input_parameters"": [], ""output_parameters"": [""order_id:int""], ""actor"": ""working_station_is""}
{""name"": ""DisplaysScanningUI"", ""description"": ""The working station system displays the scanning UI.It takes no input. It returns no output."", ""input_parameters"": [""order_id:int""], ""output_parameters"": [], ""actor"": ""working_station_is""}
{""name"": ""AssembleParts"", ""description"": ""Worker assembles parts.It takes no input. It returns no output."", ""input_parameters"": [], ""output_parameters"": [], ""actor"": ""worker""}
","import threading

# Assuming the tools are already imported and available for use as described
# EmptyScan, ScanOrder, DisplaysScanningUI, AssembleParts

def display_scanning_ui_and_assemble_parts(order_id):
    # Display scanning UI
    DisplaysScanningUI.call(order_id=order_id)
    # Assemble parts in parallel
    AssembleParts.call()

def process_pallet_arrival():
    # Empty scan results
    EmptyScan.call()
    
    # Scan order
    order_id = ScanOrder.call()
    
    # Create threads for parallel execution of displaying scanning UI and assembling parts
    thread_ui = threading.Thread(target=DisplaysScanningUI.call, args=(order_id,))
    thread_assemble = threading.Thread(target=AssembleParts.call)
    
    # Start threads
    thread_ui.start()
    thread_assemble.start()
    
    # Wait for both threads to complete
    thread_ui.join()
    thread_assemble.join()
    
    return ""Process completed.""

if __name__ == ""__main__"":
    result = process_pallet_arrival()
    print(result)"
p02,"The calibration process of a cardboard production consists of continuously capturing a photo of the cardboard being produced. Each photo is analyzed to check if all the markers identified are ok. If markers are not ok, the calibration process continues. If the markers are ok, the speed of the die cutting machine is set to 10000 RPM and the process ends.","graph LR
1:startevent:((startevent)) --> 2:task:(Capture photo of cardboard)
2:task: --> 3:task:(Analyze photo)
3:task: --> 4:exclusivegateway:{x}
4:exclusivegateway:{x} --> |Markers not ok| 2:task:
4:exclusivegateway:{x} --> |Markers ok| 5:task:(Set machine speed to 10000 RPM)
5:task: --> 6:endevent:((endevent))","[""continuously capture photos of the cardboard production"", ""analyze photos to ensure markers are ok"", ""continue calibration if markers are not ok"", ""set die cutting machine speed to 10000 RPM if markers are ok""]","[""continuously capture a photo of the cardboard being produced"", ""analyze each photo to check if all markers are ok"", ""if markers are not ok, continue the calibration process"", ""if markers are ok, set the speed of the die cutting machine to 10000 RPM""]","{""name"": ""CaptureImage"", ""description"": ""Capture of a photo of the cardboard from the camera.This tool takes no input and returns an image captured from the the camera. The image is returned as a numpy matrix."", ""input_parameters"": [], ""output_parameters"": [""image:np.matrix""], ""actor"": ""camera""}
{""name"": ""StoreCardboardRoll"", ""description"": ""Worker stores the cardboard roll in the warehouse.It takes as input the location. It returns no output."", ""input_parameters"": [""location:str""], ""output_parameters"": [], ""actor"": ""worker""}
{""name"": ""CheckMarkers"", ""description"": ""Analysis of the markers on a cardboard image.This tool takes as input an image depicting a cardboard. It returns a boolean indicating if markers are present on the cardboard."", ""input_parameters"": [""image:np.matrix""], ""output_parameters"": [""markers_ok:bool""], ""actor"": ""vision_is""}
{""name"": ""SetSpeedDieMachine"", ""description"": ""set the speed of the die cutting machine.It takes as input the speed. It returns a boolean value, True if the speed has been set, False otherwise."", ""input_parameters"": [""speed:int""], ""output_parameters"": [""speed_set:bool""], ""actor"": ""die_machine""}
","import numpy as np

# Assuming the tools are already imported and available for use
# from tools import CaptureImage, CheckMarkers, SetSpeedDieMachine

def calibration_process():
    while True:
        # Capture photo of the cardboard
        captured_image = CaptureImage.call()
        
        # Analyze photo to check if all markers identified are ok
        markers_ok = CheckMarkers.call(image=captured_image)
        
        # If markers are not ok, the calibration process continues (loop)
        if not markers_ok:
            continue
        
        # If markers are ok, set the speed of the die cutting machine to 10000 RPM and end the process
        speed_set = SetSpeedDieMachine.call(speed=10000)
        if speed_set:
            print(""Machine speed set to 10000 RPM successfully."")
        else:
            print(""Failed to set machine speed."")
        break

if __name__ == ""__main__"":
    calibration_process()"
p03,"The manufacturing process of spindles in HSD company is fully automated. When a new order for a spindle arrives at the sales department, a new process instance is initiated. The warehouse system retrive the necessary raw materials, and in parallel the L12 line is set up for the assembly of the ordered spindle. Once the warehouse successfully retrieves the raw materials and the L12 line is set up, the spindle is assembled over the L12 line. Subsequently, the spindle undergoes testing and running-in in the smart tester. If the outcome of the test is negative, the spindle is sent to maintenance. Then, the the process ends.","graph LR
1:startevent:((startevent)) --> 2:task:(New order arrives)
2:task: --> 3:parallelgateway:{AND}
3:parallelgateway:{AND} --> 4:task:(Retrieve raw materials)
3:parallelgateway:{AND} --> 5:task:(Set up L12 line)
4:task: --> 6:parallelgateway:{AND}
5:task: --> 6:parallelgateway:{AND}
6:parallelgateway:{AND} --> 7:task:(Assemble spindle)
7:task: --> 8:task:(Test and run-in spindle)
8:task: --> 9:exclusivegateway:{x}
9:exclusivegateway:{x} --> |Test Negative| 10:task:(Send to maintenance)
9:exclusivegateway:{x} --> |Test Positive| 11:endevent:((endevent))
10:task: --> 11:endevent:((endevent))","[""receive a new order for a spindle"", ""retrieve the necessary raw materials from the warehouse"", ""set up the L12 line for spindle assembly"", ""assemble the spindle on the L12 line"", ""test and run-in the spindle in the smart tester"", ""send the spindle to maintenance if the test outcome is negative""]","[""receive a new order for a spindle"", ""retrieve the necessary raw materials from the warehouse"", ""set up the L12 line for spindle assembly"", ""assemble the spindle over the L12 line"", ""test and run-in the spindle in the smart tester"", ""if the test outcome is negative, send the spindle to maintenance""]","{""name"": ""L12AssembleSpindle"", ""description"": ""Assembly of a spindle over the L12 line.This tool takes as input the part list of a spindle. It returns a boolean indicating if the spindle has been assembled."", ""input_parameters"": {""part_list"": {""type"": ""list"", ""description"": ""list of parts of a spindle""}}, ""output_parameters"": {""assembled"": {""type"": ""bool"", ""description"": ""True if the spindle has been assembled, False otherwise""}}, ""actor"": ""l12""}
{""name"": ""RetrieveRawMaterials"", ""description"": ""Warehouse deparment evaluates part list and retrieve raw materials.This tool takes as input the part list of a product. It returns a boolean indicating if all the parts are retrieved."", ""input_parameters"": [""part_list:list""], ""output_parameters"": [""retrieved:bool""], ""actor"": ""wms_is""}
{""name"": ""OrderRawMaterial"", ""description"": ""Warehouse deparment orders the raw material.It takes the part as input. It does not return anything."", ""input_parameters"": [""part:str""], ""output_parameters"": [], ""actor"": ""wms_is""}
{""name"": ""RetrieveRawMaterial"", ""description"": ""Warehouse department retrieves a raw material.It takes the part as input. It returns a boolean indicating if the part is retrieved."", ""input_parameters"": [""part:str""], ""output_parameters"": [""retrieved:bool""], ""actor"": ""wms_is""}
{""name"": ""L12SetUp"", ""description"": ""Set up the L12 line for spindle assembly.This tool takes no input and returns a boolean indicating if the line has been set up."", ""input_parameters"": [], ""output_parameters"": [""set_up:bool""], ""actor"": ""l12""}
{""name"": ""TestSpindle"", ""description"": ""Test and run-in of the spindle.It takes as input the identificator of the product to be tested. It returns a boolean value, True if the spindle passed the test, False otherwise."", ""input_parameters"": [""product_id:int""], ""output_parameters"": [""passed:bool""], ""actor"": ""smart_tester""}
","import threading

# Assuming the tools are already imported and available for use as described
def process(part_list, product_id):
    # Step 1: Retrieve raw materials and set up L12 line in parallel
    def retrieve_raw_materials():
        return RetrieveRawMaterials.call(part_list=part_list)

    def setup_l12_line():
        return L12SetUp.call()

    retrieve_thread = threading.Thread(target=retrieve_raw_materials)
    setup_thread = threading.Thread(target=setup_l12_line)

    retrieve_thread.start()
    setup_thread.start()

    retrieve_thread.join()
    setup_thread.join()

    # Both tasks completed, proceed to assemble spindle
    assembly_result = L12AssembleSpindle.call(part_list=part_list)

    if not assembly_result['assembled']:
        return False  # Assembly failed, end process

    # Test and run-in spindle
    test_result = TestSpindle.call(product_id=product_id)

    if not test_result['passed']:
        # Test failed, send to maintenance
        # Assuming maintenance does not affect the outcome of the process
        return True  # Process ends after maintenance

    return True  # Process successfully completed

if __name__ == ""__main__"":
    part_list = ['part1', 'part2', 'part3']  # Example part list
    product_id = 123  # Example product ID
    process_completed = process(part_list, product_id)
    print(f""Process completed: {process_completed}"")"
p04,"When craving a custom 3D model, as a first step you have to instruct an artist to create a project for you. First you have to send him several sketches, and then tell him what to change until you are satisfied with the result. After that, you choose a plastic color you want to use for 3D printing. If you have the color at home (in stock), you check how much color you have left. If it's under 100 grams, you put it on your shopping list. If you do not have the color at home, you order it. When you have the plastic, you can turn the printer on and heat up the bed and the extruder (it continuously sends you back its status). While doing that, you can generate the gcode file for your printer out of the STL sent to you by the artist. After that you print the model.","graph LR
1:startevent:((startevent)) --> 2:task:(Instruct Artist)
2:task: --> 3:task:(Send Sketches)
3:task: --> 4:task:(Revise Project)
4:task: --> 5:task:(Choose Plastic Color)
5:task: --> 6:exclusivegateway:{x}
6:exclusivegateway:{x} --> |Color In Stock| 7:task:(Check Color Quantity)
7:task: --> 8:exclusivegateway:{x}
8:exclusivegateway:{x} --> |Under 100g| 9:task:(Add to Shopping List)
8:exclusivegateway:{x} --> |Above 100g| 10:task:(Prepare Printer)
6:exclusivegateway:{x} --> |Color Not In Stock| 11:task:(Order Color)
11:task: --> 10:task:(Prepare Printer)
10:task: --> 12:task:(Generate Gcode)
12:task: --> 13:task:(Print Model)
13:task: --> 14:endevent:((endevent))","[""instruct an artist to create a project based on initial sketches"", ""send sketches and provide feedback until satisfied"", ""select the desired plastic color for the model"", ""check stock for the selected color and its quantity"", ""add the color to the shopping list if quantity is under 100 grams"", ""order the color if it's not available in stock"", ""heat up the 3D printer's bed and extruder for printing"", ""convert the STL file to Gcode for the printer"", ""start the 3D printing process of the model""]","[""instruct an artist to create a 3D model project"", ""send initial sketches to the artist"", ""revise the project until satisfied"", ""choose the plastic color for 3D printing"", ""check the quantity of the chosen color if in stock"", ""add the color to the shopping list if under 100 grams"", ""order the color if not in stock"", ""prepare the 3D printer (heat up the bed and the extruder)"", ""generate the Gcode file from the STL file"", ""print the 3D model""]","{""name"": ""SendSketches"", ""description"": ""Send the sketches of the project to the artist.It takes no input. It returns the description of the project."", ""input_parameters"": [], ""output_parameters"": [""project:str""], ""actor"": ""manufacturer""}
{""name"": ""ChoosePlasticColor"", ""description"": ""Choose the color of the plastic.It takes no input. It returns the color of the plastic."", ""input_parameters"": [], ""output_parameters"": [""color:int""], ""actor"": ""manufacturer""}
{""name"": ""CheckColorQuantity"", ""description"": ""Check the quantity of the color.It takes the color as input. It returns the quantity of the color in grams."", ""input_parameters"": [""color:int""], ""output_parameters"": [""quantity:int""], ""actor"": ""manufacturer""}
{""name"": ""CheckColorAvailability"", ""description"": ""Check the availability of the color.It takes the color as input. It returns the availability of the color."", ""input_parameters"": [""color:int""], ""output_parameters"": [""availability:bool""], ""actor"": ""manufacturer""}
{""name"": ""OrderColor"", ""description"": ""Order the color.It takes the color as input. It does not return anything."", ""input_parameters"": [""color:int""], ""output_parameters"": [], ""actor"": ""manufacturer""}
{""name"": ""HeatUpBedExtruder"", ""description"": ""Heat up the bed and the extruder.It takes no input. It does not return anything."", ""input_parameters"": [], ""output_parameters"": [], ""actor"": ""printer_3d""}
{""name"": ""TurnOn"", ""description"": ""Turn on the 3D printer.It takes no input. It does not return anything."", ""input_parameters"": [], ""output_parameters"": [], ""actor"": ""printer_3d""}
{""name"": ""GenerateGCode"", ""description"": ""Generate the GCode file for the printer.It takes the object as input. It returns the GCode file."", ""input_parameters"": [""project:str""], ""output_parameters"": [""gcode:str""], ""actor"": ""manufacturer""}
{""name"": ""Print"", ""description"": ""Print the object.It takes the object as input. It does not return anything."", ""input_parameters"": [""GCodeFile:str""], ""output_parameters"": [], ""actor"": ""printer_3d""}
","def instruct_artist():
    project_description = SendSketches.call()
    return project_description

def choose_plastic_color():
    color = ChoosePlasticColor.call()
    return color

def check_and_order_color(color):
    availability = CheckColorAvailability.call(color=color)
    if not availability:
        OrderColor.call(color=color)
    else:
        quantity = CheckColorQuantity.call(color=color)
        if quantity < 100:
            print(""Adding color to shopping list."")
            # Add to shopping list (Assuming a function or a process for adding to shopping list exists)
        # If quantity is above 100g, no action needed as per process description

def prepare_printer():
    TurnOn.call()
    HeatUpBedExtruder.call()

def generate_gcode(project):
    gcode = GenerateGCode.call(project=project)
    return gcode

def print_model(gcode):
    Print.call(GCodeFile=gcode)

def process():
    project_description = instruct_artist()
    color = choose_plastic_color()
    check_and_order_color(color)
    prepare_printer()
    gcode = generate_gcode(project_description)
    print_model(gcode)
    return ""Process completed.""

if __name__ == ""__main__"":
    result = process()
    print(result)"
p05,"Plastic injection molding is a manufacturing process for producing a variety of parts by injecting molten plastic material into a mold, and letting it cool and solidify into the desired end product. Our interest is in the quality assurance process which involves real-time monitoring of injection molding parameters. As each batch of molten plastic enters the mold, sensors capture data on temperature, pressure, and fill rates. The system analyzes this data to ensure that the molding parameters align with the specified standards. If any deviations are detected, the system triggers adjustments to the injection molding machine settings, allowing for immediate correction. Once the parameters are within the acceptable range, the system authorizes the production run to continue. This dynamic monitoring process guarantees the consistency and quality of the plastic molded components, minimizing the risk of defects and ensuring adherence to precise manufacturing specifications.","graph LR
1:startevent:((startevent)) --> 2:task:(Monitor Injection Molding Parameters)
2:task: --> 3:exclusivegateway:{x}
3:exclusivegateway:{x} --> |Deviations Detected| 4:task:(Adjust Machine Settings)
4:task: --> 2:task:
3:exclusivegateway:{x} --> |Parameters Acceptable| 5:task:(Authorize Production Run)
5:task: --> 6:endevent:((endevent))","[""real-time monitoring of injection molding parameters"", ""adjust injection molding machine settings upon detecting deviations"", ""authorize continuation of production run when parameters meet acceptable standards""]","[""monitor injection molding parameters in real-time"", ""adjust the injection molding machine settings if deviations are detected"", ""authorize the production run if parameters are within the acceptable range""]","{""name"": ""SensorMeasure"", ""description"": ""Measure the temperature, pressure and fill rates of the mold.It takes no input and returns the temperature of the oven."", ""input_parameters"": [], ""output_parameters"": [""temperature:int"", ""pressure:int"", ""fill_rate:int""], ""actor"": ""mold_is""}
{""name"": ""AnalyzeMold"", ""description"": ""Analyze the temperature, pressure and fill rates of the mold to check deviations.It takes the temperature, pressure and fill rate as input and returns a boolean indicating if the mold is ok."", ""input_parameters"": [""temperature:int"", ""pressure:int"", ""fill_rate:int""], ""output_parameters"": [""deviation:bool""], ""actor"": ""mold_is""}
{""name"": ""AuthorizeProduction"", ""description"": ""Authorize the production of the mold.It takes no input and returns no output."", ""input_parameters"": [], ""output_parameters"": [], ""actor"": ""mold_is""}
","def monitor_and_adjust_parameters():
    # Monitor Injection Molding Parameters
    temperature, pressure, fill_rate = SensorMeasure.call()
    
    # Analyze the parameters to check for deviations
    deviation = AnalyzeMold.call(temperature=temperature, pressure=pressure, fill_rate=fill_rate)
    
    if deviation:
        # Adjust Machine Settings if deviations are detected
        # Assuming there's a tool or method to adjust the settings which is not specified
        # For the sake of example, we'll assume a placeholder function AdjustSettings.call() exists
        # AdjustSettings.call()
        # Since the actual tool for adjustment is not provided, we'll just print a message
        print(""Adjusting machine settings..."")
        return False  # Indicating that adjustments were made and monitoring needs to be repeated
    else:
        # Authorize Production Run if parameters are acceptable
        AuthorizeProduction.call()
        return True  # Indicating that the process can proceed

def main_process():
    while True:
        process_completed = monitor_and_adjust_parameters()
        if process_completed:
            break  # Exit the loop once the production run is authorized

if __name__ == ""__main__"":
    main_process()"
p06,"The production of custom metal brackets begins with order processing. The warehouse department evaluates the parts lists and in parallel the production planning department configures the robotic assembly line accordingly. The automated precision machine cuts the metal and the welding machine assembles the parts into brackets. A computer vision inspection system then checks for quality assurance. If defective brakets are detected, the process ends. After inspection, a coating system enhances durability. Finally, the process is complete.","graph LR
1:startevent:((startevent)) --> 2:task:(Process Order)
2:task: --> 3:parallelgateway:{AND}
3:parallelgateway:{AND} --> 4:task:(Evaluate Parts List)
3:parallelgateway:{AND} --> 5:task:(Configure Robotic Assembly Line)
4:task: --> 6:parallelgateway:{AND}
5:task: --> 6:parallelgateway:{AND}
6:parallelgateway:{AND} --> 7:task:(Cut Metal)
7:task: --> 8:task:(Assemble Brackets)
8:task: --> 9:task:(Inspect Brackets)
9:task: --> 10:exclusivegateway:{x}
10:exclusivegateway:{x} --> |Defective| 11:endevent:((endevent))
10:exclusivegateway:{x} --> |No Defects| 12:task:(Apply Coating)
12:task: --> 13:endevent:((endevent))","[""process the customer order"", ""warehouse department evaluates the parts list"", ""production planning configures the robotic assembly line"", ""automated precision machine cuts the metal"", ""welding machine assembles the parts into brackets"", ""computer vision system inspects the brackets for quality"", ""apply a coating to enhance the durability of the brackets""]","[""process the order"", ""evaluate the parts list"", ""configure the robotic assembly line"", ""cut the metal with precision machinery"", ""assemble the metal parts into brackets"", ""inspect the brackets with a computer vision system"", ""apply a coating to enhance durability""]","{""name"": ""AcceptOrder"", ""description"": ""Sales department accepts the order.It takes the product id as input. It returns a boolean indicating if the order is accepted."", ""input_parameters"": [""product_id:int""], ""output_parameters"": [""order_accepted:bool""], ""actor"": ""crm_is""}
{""name"": ""RetrieveRawMaterials"", ""description"": ""Warehouse deparment evaluates part list and retrieve raw materials.This tool takes as input the part list of a product. It returns a boolean indicating if all the parts are retrieved."", ""input_parameters"": [""part_list:list""], ""output_parameters"": [""retrieved:bool""], ""actor"": ""wms_is""}
{""name"": ""ConfigureAssemblyLine"", ""description"": ""Configure the assembly line.This tool takes no input and does not return anything."", ""input_parameters"": [], ""output_parameters"": [], ""actor"": ""assembly_line""}
{""name"": ""CutMetal"", ""description"": ""The precision machine cut the metal.This tool takes no input and does not return anything."", ""input_parameters"": [], ""output_parameters"": [], ""actor"": ""precision_machine""}
{""name"": ""AssembleParts"", ""description"": ""The welding machine assemble the parts into brackets.This tool takes no input and does not return anything."", ""input_parameters"": [], ""output_parameters"": [], ""actor"": ""welding_machine""}
{""name"": ""AssembleParts"", ""description"": ""Worker assembles parts.It takes no input. It returns no output."", ""input_parameters"": [], ""output_parameters"": [], ""actor"": ""worker""}
{""name"": ""CheckQualityBrackets"", ""description"": ""Check the quality of the brackets.It takes no input. It returns a boolean indicating if the brackets are of good quality."", ""input_parameters"": [], ""output_parameters"": [""quality_ok:bool""], ""actor"": ""vision_is""}
{""name"": ""EnhanceProduct"", ""description"": ""The coating machine enhances the product.This tool takes no input and does not return anything."", ""input_parameters"": [], ""output_parameters"": [], ""actor"": ""coating_machine""}
","import threading

# Assuming the tools are already imported as per the guidelines
# from tools import AcceptOrder, RetrieveRawMaterials, ConfigureAssemblyLine, CutMetal, AssembleParts, CheckQualityBrackets, EnhanceProduct

def process_order(product_id, part_list):
    # Accept the order
    order_accepted = AcceptOrder.call(product_id=product_id)
    if not order_accepted:
        return False

    # Parallel execution for evaluating parts list and configuring the assembly line
    def evaluate_parts():
        global parts_retrieved
        parts_retrieved = RetrieveRawMaterials.call(part_list=part_list)

    def configure_assembly_line():
        ConfigureAssemblyLine.call()

    thread1 = threading.Thread(target=evaluate_parts)
    thread2 = threading.Thread(target=configure_assembly_line)

    thread1.start()
    thread2.start()

    thread1.join()
    thread2.join()

    if not parts_retrieved:
        return False

    # Sequential tasks for cutting metal, assembling brackets, and inspecting them
    CutMetal.call()
    AssembleParts.call()
    quality_ok = CheckQualityBrackets.call()

    if not quality_ok:
        return False

    # Apply coating if the brackets pass the quality inspection
    EnhanceProduct.call()

    return True

if __name__ == ""__main__"":
    product_id = 123  # Example product ID
    part_list = ['part1', 'part2', 'part3']  # Example part list
    process_completed = process_order(product_id, part_list)
    if process_completed:
        print(""Process completed successfully."")
    else:
        print(""Process terminated due to an error or quality issue."")"
p07,"You produce airplanes. While the base model is always the same, your customer likes to pimp their airplane with fancy interior. You let them decide between a number of 5 different bars, the number of seats, their color, and the amount of water in the toilets of their plane (you can come up with additional stuff). After you received the specifications you send the requirements to different teams to manufacture the parts. E.g. manufacturing the vodka bar is done by the Russian team, the whiskey bar is manufactured by an Irish team. After receiving the individual bits and pieces, the interior of the plane is assembled, and the plane is sent on a test flight. During the flight you create a test protocol which is sent to you and the customer. The plane is delivered to the customer, which has to confirm.","graph LR
1:startevent:((startevent)) --> 2:task:(Receive airplane customization specifications)
2:task: --> 3:parallelgateway:{AND}
3:parallelgateway:{AND} --> 4:task:(Manufacture vodka bar)
3:parallelgateway:{AND} --> 5:task:(Manufacture whiskey bar)
3:parallelgateway:{AND} --> 6:task:(Manufacture seats)
3:parallelgateway:{AND} --> 7:task:(Manufacture additional customizations)
4:task: --> 8:parallelgateway:{AND}
5:task: --> 8:parallelgateway:{AND}
6:task: --> 8:parallelgateway:{AND}
7:task: --> 8:parallelgateway:{AND}
8:parallelgateway:{AND} --> 9:task:(Assemble interior)
9:task: --> 10:task:(Test flight)
10:task: --> 11:task:(Create test protocol)
11:task: --> 12:task:(Deliver plane to customer)
12:task: --> 13:task:(Customer confirmation)
13:task: --> 14:endevent:((endevent))","[""receive the customer's specifications for airplane customization"", ""vodka bar is manufactured by the Russian team"", ""whiskey bar is manufactured by the Irish team"", ""seats are manufactured according to specifications"", ""additional customizations are manufactured based on customer's specifications"", ""assemble the customized interior of the airplane"", ""conduct a test flight of the airplane"", ""create and send a test protocol during the test flight"", ""deliver the customized airplane to the customer"", ""obtain confirmation of delivery from the customer""]","[""receive customization specifications from the customer"", ""manufacture vodka bar"", ""manufacture whiskey bar"", ""manufacture seats"", ""manufacture additional customizations based on customer's specifications"", ""assemble the interior of the airplane"", ""conduct a test flight"", ""create a test protocol during the flight"", ""deliver the airplane to the customer"", ""obtain confirmation from the customer""]","{""name"": ""ReceiveOrder"", ""description"": ""Sales department receives a new order specification from customer.It takes no input. It returns the part list and the product id."", ""input_parameters"": [], ""output_parameters"": [""part_list:list"", ""product_id:int""], ""actor"": ""crm_is""}
{""name"": ""BuySnacks"", ""description"": ""Buy snacks for the party.It takes the list of people. It does not return anything."", ""input_parameters"": [""people:list""], ""output_parameters"": [], ""actor"": ""manufacturer""}
{""name"": ""InformStorehouseEngineering"", ""description"": ""Inform the storehouse and the engineering departments.It takes the part list and the product id. It does not return anything."", ""input_parameters"": [""part_list:list"", ""product_id:int""], ""output_parameters"": [], ""actor"": ""manufacturer""}
{""name"": ""AssembleInterior"", ""description"": ""Assemble the interior of the plane.It takes the part list and the plane id. It does not return anything."", ""input_parameters"": [""part_list:list"", ""product_id:int""], ""output_parameters"": [], ""actor"": ""manufacturer""}
{""name"": ""OrderParts"", ""description"": ""Manufacturer orders the parts online.It takes the part list. It does not return anything."", ""input_parameters"": [""part_list:list""], ""output_parameters"": [], ""actor"": ""manufacturer""}
{""name"": ""CreateTestProtocol"", ""description"": ""Create the test protocol for the product.It takes the part list and the product id. It returns the test protocol."", ""input_parameters"": [""part_list:list"", ""product_id:int""], ""output_parameters"": [""test_protocol:str""], ""actor"": ""manufacturer""}
","import threading

# Assuming the tools are already imported and available for use

def manufacture_parts(part_list, product_id):
    # Inform storehouse and engineering departments about the parts and product id
    InformStorehouseEngineering.call(part_list=part_list, product_id=product_id)
    # Manufacturer orders the parts online
    OrderParts.call(part_list=part_list)

def assemble_and_test(part_list, product_id):
    # Assemble the interior of the plane
    AssembleInterior.call(part_list=part_list, product_id=product_id)
    # Create the test protocol for the product
    test_protocol = CreateTestProtocol.call(part_list=part_list, product_id=product_id)
    return test_protocol

def process():
    # Sales department receives a new order specification from customer
    part_list, product_id = ReceiveOrder.call()
    
    # Manufacture parts in parallel
    threads = []
    for _ in range(4):  # Assuming there are 4 different parts to manufacture in parallel
        thread = threading.Thread(target=manufacture_parts, args=(part_list, product_id))
        threads.append(thread)
        thread.start()
    
    for thread in threads:
        thread.join()
    
    # Assemble interior and test
    test_protocol = assemble_and_test(part_list, product_id)
    
    # Deliver plane to customer and wait for confirmation
    # Assuming a function DeliverPlane exists for delivery and confirmation
    # This is a placeholder as the actual delivery and confirmation process is not detailed in the tools
    # DeliverPlane.call(product_id=product_id, test_protocol=test_protocol)
    
    return ""Process completed successfully.""

if __name__ == ""__main__"":
    result = process()
    print(result)"
p08,"The warehouse of Grimaldi is a warehouse that stores cardboard rolls. A cardboard roll is used to produce cardboards. There exists two types of cardboard: the white cardboard and the brown cardboard. The warehouse stores the cardboard rolls depending on the type of cardboard. When a new cardboard roll arrives at the warehouse, the worker checks the type of cardboard and enter this information inside the WMS system. The system automatically capture an image of the current status of the warehouse. By analyzing the image, the system identifies the location where the cardboard roll should be stored. Then the worker stores the cardboard rool in the identified location in the warehouse and the system updates the stock of that cardboard rolls in the warehouse.","graph LR
1:startevent:((startevent)) --> 2:task:(New Cardboard Roll Arrives)
2:task: --> 3:task:(Check Cardboard Type)
3:task: --> 4:task:(Enter Information in WMS)
4:task: --> 5:task:(Capture Image of Warehouse)
5:task: --> 6:task:(Identify Storage Location)
6:task: --> 7:task:(Store Cardboard Roll)
7:task: --> 8:task:(Update Stock in System)
8:task: --> 9:endevent:((endevent))","[""receiving a new cardboard roll at the warehouse"", ""checking the type of the cardboard roll"", ""entering the cardboard type information into the WMS system"", ""capturing an image of the current warehouse status"", ""identifying the storage location for the new cardboard roll"", ""storing the cardboard roll in the identified location"", ""updating the stock of cardboard rolls in the warehouse""]","[""receive a new cardboard roll at the warehouse"", ""check the type of the cardboard roll"", ""enter the cardboard type information into the WMS system"", ""capture an image of the current warehouse status"", ""identify the storage location for the new cardboard roll"", ""store the cardboard roll in the identified location"", ""update the stock of cardboard rolls in the warehouse""]","{""name"": ""StoreCardboardRoll"", ""description"": ""Worker stores the cardboard roll in the warehouse.It takes as input the location. It returns no output."", ""input_parameters"": [""location:str""], ""output_parameters"": [], ""actor"": ""worker""}
{""name"": ""AnalyzeWarehouse"", ""description"": ""Identify where to store a new cardboard roll.It takes as input an image of the warehouse and the type of cardboard roll. It returns the location where to store the new product."", ""input_parameters"": [""image:np.matrix"", ""type_cardboard:str""], ""output_parameters"": [""location:str""], ""actor"": ""vision_is""}
{""name"": ""CheckTypeCardboard"", ""description"": ""Worker checks the type of cardboard.It takes no input. It returns no output."", ""input_parameters"": [], ""output_parameters"": [""type_cardboard:str""], ""actor"": ""worker""}
{""name"": ""InsertCardboardTypeInfo"", ""description"": ""Worker inserts the type of cardboard in the system.It takes the type of cardboard as input. It returns no output."", ""input_parameters"": [""type_cardboard:str""], ""output_parameters"": [], ""actor"": ""worker""}
{""name"": ""UpdateStock"", ""description"": ""Warehouse department updates the stock of a product.It takes as input the product type. It does not return anything."", ""input_parameters"": [""product_type:str""], ""output_parameters"": [], ""actor"": ""wms_is""}
","import numpy as np

# Assuming the necessary tool classes are already imported as per the guidelines.

def process_new_cardboard_roll(image: np.matrix):
    # Check the type of the cardboard
    type_cardboard = CheckTypeCardboard.call()
    
    # Enter the type of cardboard into the WMS system
    InsertCardboardTypeInfo.call(type_cardboard=type_cardboard)
    
    # Capture an image of the current warehouse status (assuming image is already provided)
    # Note: The process description mentions capturing an image, but since it's not a tool and the image is already an input, we'll proceed with the given image.
    
    # Identify the storage location based on the image and type of cardboard
    location = AnalyzeWarehouse.call(image=image, type_cardboard=type_cardboard)
    
    # Store the cardboard roll in the identified location
    StoreCardboardRoll.call(location=location)
    
    # Update the stock in the system
    UpdateStock.call(product_type=type_cardboard)

if __name__ == ""__main__"":
    # Example usage
    # Assuming an example image of the warehouse is provided as a numpy matrix
    example_image = np.matrix([[0, 0, 1], [1, 0, 0], [0, 1, 0]])  # Simplified representation
    process_new_cardboard_roll(example_image)"
p09,"You want to build a tree house. First you collect your requirements, and send them to a tree house architect. The architect sends you back a draft, which you refine multiple times with additional requirements. You then create the list of needed materials from the plan. These materials fall into several categories, you order them from several online stores. While the order is processed, you send messages to several of your friends to build the house. After the house is built, you send invitations for a tree house party to your friends. In order to buy the snacks for the party, a list of people that attend the party is created.","graph LR
1:startevent:((startevent)) --> 2:task:(Collect Requirements)
2:task: --> 3:task:(Send Requirements to Architect)
3:task: --> 4:task:(Receive Draft from Architect)
4:task: --> 5:exclusivegateway:{x}
5:exclusivegateway:{x} --> |Additional Requirements| 6:task:(Refine Draft)
6:task: --> 4:task:
5:exclusivegateway:{x} --> |No Additional Requirements| 7:task:(Create List of Materials)
7:task: --> 8:parallelgateway:{AND}
8:parallelgateway:{AND} --> 9:task:(Order Materials Online)
8:parallelgateway:{AND} --> 10:task:(Send Messages to Friends)
9:task: --> 11:parallelgateway:{AND}
10:task: --> 11:parallelgateway:{AND}
11:parallelgateway:{AND} --> 12:task:(Build Tree House)
12:task: --> 13:task:(Send Invitations for Tree House Party)
13:task: --> 14:task:(Create List for Party Snacks)
14:task: --> 15:endevent:((endevent))","[""collect requirements for the tree house"", ""send requirements to the architect"", ""receive draft plan from the architect"", ""refine the draft plan with additional requirements"", ""list needed materials from the final plan"", ""order materials from online stores"", ""recruit friends to help build the house"", ""construct the tree house"", ""invite friends to the tree house party"", ""compile a list of attendees for snack purchase""]","[""collect your requirements for the tree house"", ""send the requirements to a tree house architect"", ""receive a draft plan from the architect"", ""refine the draft with additional requirements as needed"", ""create a list of needed materials from the final plan"", ""order the materials from several online stores"", ""send messages to friends to help build the house"", ""build the tree house"", ""send invitations for a tree house party"", ""create a list of people attending the party to buy snacks""]","{""name"": ""GenerateRequirementTreeHouse"", ""description"": ""Generate the requirement for the tree house.It takes no input. It returns the part list."", ""input_parameters"": [], ""output_parameters"": [""part_list:list""], ""actor"": ""manufacturer""}
{""name"": ""RefineRequirementsTreeHouse"", ""description"": ""Refine the requirements for the tree house.It takes the part list. It returns the refined part list."", ""input_parameters"": [""part_list:list""], ""output_parameters"": [""refined_part_list:list""], ""actor"": ""manufacturer""}
{""name"": ""SendRequirementsArchitect"", ""description"": ""Send the requirements to the architect.It takes the part list. It does not return anything."", ""input_parameters"": [""part_list:list""], ""output_parameters"": [], ""actor"": ""manufacturer""}
{""name"": ""SendRequirements"", ""description"": ""Send the requirements (part list) to the proper teams.It takes the list of requirements. It does not return anything."", ""input_parameters"": [""part_list:list""], ""output_parameters"": [], ""actor"": ""manufacturer""}
{""name"": ""OrderParts"", ""description"": ""Manufacturer orders the parts online.It takes the part list. It does not return anything."", ""input_parameters"": [""part_list:list""], ""output_parameters"": [], ""actor"": ""manufacturer""}
{""name"": ""AssembleTreeHouse"", ""description"": ""Assemble the tree house.It takes the part list. It does not return anything."", ""input_parameters"": [""part_list:list""], ""output_parameters"": [], ""actor"": ""manufacturer""}
{""name"": ""BuySnacks"", ""description"": ""Buy snacks for the party.It takes the list of people. It does not return anything."", ""input_parameters"": [""people:list""], ""output_parameters"": [], ""actor"": ""manufacturer""}
","import threading

def collect_requirements():
    return GenerateRequirementTreeHouse.call()

def refine_requirements(part_list):
    return RefineRequirementsTreeHouse.call(part_list=part_list)

def send_requirements_to_architect(part_list):
    SendRequirementsArchitect.call(part_list=part_list)

def order_materials(part_list):
    OrderParts.call(part_list=part_list)

def send_messages_to_friends():
    # Assuming there's a predefined list of friends
    friends = [""Alice"", ""Bob"", ""Charlie""]
    SendRequirements.call(part_list=friends)

def build_tree_house(part_list):
    AssembleTreeHouse.call(part_list=part_list)

def send_invitations():
    # Assuming there's a predefined list of friends
    friends = [""Alice"", ""Bob"", ""Charlie""]
    # Sending invitations to the same friends who helped build the tree house
    SendRequirements.call(part_list=friends)

def create_list_for_party_snacks():
    # Assuming there's a predefined list of friends who confirmed their attendance
    attending_friends = [""Alice"", ""Bob""]
    BuySnacks.call(people=attending_friends)

def process():
    part_list = collect_requirements()
    refined_part_list = part_list
    additional_requirements = True

    while additional_requirements:
        send_requirements_to_architect(refined_part_list)
        # Simulate receiving a draft and deciding if more refinement is needed
        # For simplicity, we assume there's a condition that eventually becomes False
        additional_requirements = False  # This would be determined by some logic
        if additional_requirements:
            refined_part_list = refine_requirements(refined_part_list)

    # Once no additional requirements, create list of materials
    final_part_list = refined_part_list

    # Ordering materials and sending messages to friends in parallel
    order_thread = threading.Thread(target=order_materials, args=(final_part_list,))
    message_thread = threading.Thread(target=send_messages_to_friends)
    order_thread.start()
    message_thread.start()
    order_thread.join()
    message_thread.join()

    # Building the tree house
    build_tree_house(final_part_list)

    # Sending invitations for the tree house party
    send_invitations()

    # Creating list for party snacks
    create_list_for_party_snacks()

if __name__ == ""__main__"":
    process()"
p10,"A small company manufactures customized bicycles. Whenever the sales department receives an order, a new process instance is created. A member of the sales department can then reject or accept the order for a customized bike. In the former case, the process instance is finished. In the latter case, the storehouse and the engineering department are informed. The storehouse immediately processes the part list of the order and checks the required quantity of each part. If the part is available in-house, it is reserved. If it is not available, it is back-ordered. This procedure is repeated for each item on the part list. In the meantime, the engineering department prepares everything for the assembling of the ordered bicycle. If the storehouse has successfully reserved or back-ordered every item of the part list and the preparation activity has finished, the engineering department assembles the bicycle. Afterwards, the sales department ships the bicycle to the customer and finishes the process instance.","graph LR
1:startevent:((startevent)) --> 2:task:(Receive Order)
2:task: --> 3:exclusivegateway:{x}
3:exclusivegateway:{x} --> |Order Rejected| 4:endevent:((endevent))
3:exclusivegateway:{x} --> |Order Accepted| 5:parallelgateway:{AND}
5:parallelgateway:{AND} --> 6:task:(Process Part List)
5:parallelgateway:{AND} --> 7:task:(Prepare for Assembling)
6:task: --> 8:exclusivegateway:{x}
8:exclusivegateway:{x} --> |Part Available| 9:task:(Reserve Part)
8:exclusivegateway:{x} --> |Part Not Available| 10:task:(Back-Order Part)
9:task: --> 11:task:(Check Next Part)
10:task: --> 11:task:
11:task: --> |Parts Left| 8:exclusivegateway:{x}
11:task: --> |No Parts Left| 12:parallelgateway:{AND}
7:task: --> 12:parallelgateway:{AND}
12:parallelgateway:{AND} --> 13:task:(Assemble Bicycle)
13:task: --> 14:task:(Ship Bicycle)
14:task: --> 15:endevent:((endevent))","[""receive an order and initiate a new process instance"", ""decide whether to accept or reject the order"", ""notify the storehouse and engineering department upon order acceptance"", ""evaluate the part list for required quantities"", ""reserve available in-house parts"", ""back-order unavailable parts"", ""prepare for bicycle assembly"", ""assemble the bicycle after all parts are secured and preparations are complete"", ""deliver the bicycle to the customer and conclude the process instance""]","[""receive an order and create a new process instance"", ""accept or reject the order"", ""inform the storehouse and engineering department if the order is accepted"", ""process the part list and check the required quantity of each part"", ""reserve the part if available in-house"", ""back-order the part if it is not available"", ""prepare everything for the assembling of the ordered bicycle"", ""assemble the bicycle once all parts are reserved or back-ordered and preparation is finished"", ""ship the bicycle to the customer and finish the process instance""]","{""name"": ""ReceiveOrder"", ""description"": ""Sales department receives a new order specification from customer.It takes no input. It returns the part list and the product id."", ""input_parameters"": [], ""output_parameters"": [""part_list:list"", ""product_id:int""], ""actor"": ""crm_is""}
{""name"": ""AcceptOrder"", ""description"": ""Sales department accepts the order.It takes the product id as input. It returns a boolean indicating if the order is accepted."", ""input_parameters"": [""product_id:int""], ""output_parameters"": [""order_accepted:bool""], ""actor"": ""crm_is""}
{""name"": ""InformStorehouseEngineering"", ""description"": ""Inform the storehouse and the engineering departments.It takes the part list and the product id. It does not return anything."", ""input_parameters"": [""part_list:list"", ""product_id:int""], ""output_parameters"": [], ""actor"": ""manufacturer""}
{""name"": ""SendRequirements"", ""description"": ""Send the requirements (part list) to the proper teams.It takes the list of requirements. It does not return anything."", ""input_parameters"": [""part_list:list""], ""output_parameters"": [], ""actor"": ""manufacturer""}
{""name"": ""OrderParts"", ""description"": ""Manufacturer orders the parts online.It takes the part list. It does not return anything."", ""input_parameters"": [""part_list:list""], ""output_parameters"": [], ""actor"": ""manufacturer""}
{""name"": ""AssembleBicycle"", ""description"": ""Assemble the bicycle.It takes the part list. It does not return anything."", ""input_parameters"": [""part_list:list""], ""output_parameters"": [], ""actor"": ""manufacturer""}
","import threading

def process_part_list(part_list):
    for part in part_list:
        # Simulate checking if part is available and either reserving or back-ordering it
        # This is a simplification, as the actual logic for checking availability and reserving/back-ordering is not provided
        # Assume a function check_and_process_part(part) exists for this purpose
        check_and_process_part(part)
    # After processing all parts, inform that all parts are processed
    print(""All parts processed."")

def prepare_for_assembling():
    # Simulate preparing for assembling
    # This is a simplification, as the actual logic for preparation is not provided
    # Assume a function prepare_assembly() exists for this purpose
    prepare_assembly()
    print(""Preparation for assembling finished."")

def process_order():
    part_list, product_id = ReceiveOrder.call()
    order_accepted = AcceptOrder.call(product_id=product_id)
    if not order_accepted:
        print(""Order rejected."")
        return

    InformStorehouseEngineering.call(part_list=part_list, product_id=product_id)

    # Start parallel tasks for processing part list and preparing for assembling
    part_list_thread = threading.Thread(target=process_part_list, args=(part_list,))
    prepare_assembling_thread = threading.Thread(target=prepare_for_assembling)

    part_list_thread.start()
    prepare_assembling_thread.start()

    # Wait for both threads to complete
    part_list_thread.join()
    prepare_assembling_thread.join()

    # After both tasks are completed, proceed with assembling the bicycle
    AssembleBicycle.call(part_list=part_list)
    print(""Bicycle assembled and ready to be shipped."")

    # Simulate shipping the bicycle
    # This is a simplification, as the actual logic for shipping is not provided
    # Assume a function ship_bicycle(product_id) exists for this purpose
    ship_bicycle(product_id)
    print(""Bicycle shipped to customer."")

if __name__ == ""__main__"":
    process_order()"
