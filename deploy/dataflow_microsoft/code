digraph code {
	node [fontname="Courier New" shape=box]
	subgraph cluster_0 {
		cluster_0_0 [label="\ldef process_spindle_manufacturing():\l    part_list = ReceiveOrder.call()\l    with ThreadPoolExecutor() as executor:\l        futures = [executor.submit(RetrievePartList.call, part_list=part_list), executor.submit(L12SetUp.call)]\l        for future in as_completed(futures):\l            result = future.result()\l            if not result['retrieved'] and not result['set_up']:\l                raise Exception('Failed to retrieve parts or set up L12 lines')\l    assembled = L12AssembleSpindle.call(part_list=part_list)\l    if not assembled['assembled']:\l        raise Exception('Failed to assemble spindle')\l    test_result = TestSpindle.call(product_id=1)\l    if not test_result['passed']:\l        print('Sending spindle to maintenance')\l    else:\l        print('Spindle assembly and testing completed successfully')\l" fillcolor=white style=filled]
		cluster_0_0 -> cluster_0_1
		cluster_0_1 [label="\l" fillcolor=black style=filled]
		fontname="Courier New" label=__main__
	}
	subgraph cluster_1 {
		cluster_1_0 [label="\l" fillcolor=white style=filled]
		cluster_1_0 -> cluster_1_2
		cluster_1_2 [label="part_list = ReceiveOrder.call()\lThreadPoolExecutor()\lexecutor\lfutures = [executor.submit(RetrievePartList.call, part_list=part_list), executor.submit(L12SetUp.call)]\las_completed(futures)\l" fillcolor=white style=filled]
		cluster_1_2 -> cluster_1_3
		cluster_1_3 [label="future\l" fillcolor=white style=filled]
		cluster_1_3 -> cluster_1_5
		cluster_1_5 [label="result = future.result()\lnot result['retrieved'] and not result['set_up']\l" fillcolor=white style=filled]
		cluster_1_5 -> cluster_1_6 [label=True]
		cluster_1_6 [label="raise Exception('Failed to retrieve parts or set up L12 lines')\l" fillcolor=white style=filled]
		cluster_1_6 -> cluster_1_1
		cluster_1_1 [label="\l" fillcolor=black style=filled]
		cluster_1_5 -> cluster_1_3 [label=False]
		cluster_1_3 -> cluster_1_4
		cluster_1_4 [label="assembled = L12AssembleSpindle.call(part_list=part_list)\lnot assembled['assembled']\l" fillcolor=white style=filled]
		cluster_1_4 -> cluster_1_10 [label=True]
		cluster_1_10 [label="raise Exception('Failed to assemble spindle')\l" fillcolor=white style=filled]
		cluster_1_10 -> cluster_1_1
		cluster_1_4 -> cluster_1_12 [label=False]
		cluster_1_12 [label="test_result = TestSpindle.call(product_id=1)\lnot test_result['passed']\l" fillcolor=white style=filled]
		cluster_1_12 -> cluster_1_13 [label=True]
		cluster_1_13 [label="print('Sending spindle to maintenance')\l" fillcolor=white style=filled]
		cluster_1_13 -> cluster_1_1
		cluster_1_12 -> cluster_1_14 [label=False]
		cluster_1_14 [label="print('Spindle assembly and testing completed successfully')\l" fillcolor=white style=filled]
		cluster_1_14 -> cluster_1_1
		fontname="Courier New" label=process_spindle_manufacturing
	}
}
